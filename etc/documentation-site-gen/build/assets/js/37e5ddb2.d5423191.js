"use strict";(self.webpackChunkpallas=self.webpackChunkpallas||[]).push([[483],{9242:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>l,frontMatter:()=>f,metadata:()=>i,toc:()=>a});var r=t(4848),c=t(8453);const f={id:"effects-reference",title:"Effects Reference"},o="Effects Reference",i={id:"reference/vm-and-interpreter/effects-reference",title:"Effects Reference",description:"Additional content forthcoming",source:"@site/../../doc/reference/vm-and-interpreter/effects.md",sourceDirName:"reference/vm-and-interpreter",slug:"/reference/vm-and-interpreter/effects-reference",permalink:"/reference/vm-and-interpreter/effects-reference",draft:!1,unlisted:!1,editUrl:"https://github.com/operating-function/pallas/edit/main/doc/../../doc/reference/vm-and-interpreter/effects.md",tags:[],version:"current",frontMatter:{id:"effects-reference",title:"Effects Reference"},sidebar:"referenceSidebar",previous:{title:"Jobs Reference",permalink:"/reference/vm-and-interpreter/jobs-reference"},next:{title:"PLAN",permalink:"/reference/plan/"}},s={},a=[];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"effects-reference",children:"Effects Reference"})}),"\n",(0,r.jsx)(n.admonition,{title:"TODO",type:"warning",children:(0,r.jsx)(n.p,{children:"Additional content forthcoming"})}),"\n",(0,r.jsx)(n.p,{children:"Below is the full list of effects that are currently available to drivers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-unset",children:"type Conn = Nat\ntype IP   = Nat\ntype Port = Nat\n\ndata Eff a where\n    COG_READ  :: Any ->           Eff Any              -- Concurrent cog query\n    COG_WRITE :: Any ->           Eff Void             -- Cog input. Never returns!\n\n    TIME_WHEN ::                  Eff Nat              -- Get current time\n    TIME_WAIT :: Nat ->           Eff Unit             -- Wake at time t\n\n    TCP_OPEN  :: IP   -> Port  -> Eff Conn             -- Returns connection ID\n    TCP_GIVE  :: Conn -> Bytes -> Eff Nat              -- Returns bytes sent\n    TCP_HEAR  ::                  Eff (Conn, IP, Port) -- Accept incoming connection\n    TCP_TAKE  :: Conn ->          Eff Bytes            -- Receive bytes\n    TCP_PORT  ::                  Eff Nat              -- Get my TCP port\n    TCP_SHUT  :: Conn ->          Eff Unit             -- Close a connection\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const c={},f=r.createContext(c);function o(e){const n=r.useContext(f);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),r.createElement(f.Provider,{value:n},e.children)}}}]);