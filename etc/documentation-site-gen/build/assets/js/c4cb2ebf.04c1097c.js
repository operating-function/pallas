"use strict";(self.webpackChunkpallas=self.webpackChunkpallas||[]).push([[806],{5773:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>d,contentTitle:()=>b,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(4848),l=r(8453);const i={},b="Bars (byte arrays)",s={id:"reference/standard-library/bars-byte-arrays",title:"Bars (byte arrays)",description:"Macro for creating ASCII bar literals.",source:"@site/../../doc/reference/standard-library/12_bars-byte-arrays.md",sourceDirName:"reference/standard-library",slug:"/reference/standard-library/bars-byte-arrays",permalink:"/reference/standard-library/bars-byte-arrays",draft:!1,unlisted:!1,editUrl:"https://github.com/operating-function/pallas/edit/main/doc/../../doc/reference/standard-library/12_bars-byte-arrays.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{},sidebar:"referenceSidebar",previous:{title:"Pads",permalink:"/reference/standard-library/pads"},next:{title:"Types",permalink:"/reference/standard-library/types"}},d={},c=[{value:"padBar",id:"padbar",level:3},{value:"isBar",id:"isbar",level:3},{value:"emptyBar",id:"emptybar",level:3},{value:"barIsEmpty",id:"barisempty",level:3},{value:"byteWidth",id:"bytewidth",level:3},{value:"barTrail",id:"bartrail",level:3},{value:"barEnc",id:"barenc",level:3},{value:"barDec",id:"bardec",level:3},{value:"mkBar",id:"mkbar",level:3},{value:"natBar",id:"natbar",level:3},{value:"barNat",id:"barnat",level:3},{value:"barLen",id:"barlen",level:3},{value:"barIdx",id:"baridx",level:3},{value:"natToSizedBar",id:"nattosizedbar",level:3},{value:"barSing",id:"barsing",level:3},{value:"barDuo",id:"barduo",level:3},{value:"zEnd",id:"zend",level:3},{value:"stripZEnd",id:"stripzend",level:3},{value:"w8",id:"w8",level:3},{value:"bytesBar",id:"bytesbar",level:3},{value:"barGen",id:"bargen",level:3},{value:"barRep",id:"barrep",level:3},{value:"barGet",id:"barget",level:3},{value:"barBytes",id:"barbytes",level:3},{value:"barFoldl",id:"barfoldl",level:2},{value:"barFoldr",id:"barfoldr",level:2},{value:"barAny",id:"barany",level:3},{value:"barAll",id:"barall",level:3},{value:"barWeld",id:"barweld",level:3},{value:"barCat",id:"barcat",level:3},{value:"barCatList",id:"barcatlist",level:3},{value:"barCatMap",id:"barcatmap",level:3},{value:"barIntercalate",id:"barintercalate",level:3},{value:"barIntercalateList",id:"barintercalatelist",level:3},{value:"barFromHex",id:"barfromhex",level:3},{value:"barPad",id:"barpad",level:3},{value:"barTake",id:"bartake",level:3},{value:"barDrop",id:"bardrop",level:3},{value:"barSlice",id:"barslice",level:3},{value:"barSliceToNat",id:"barslicetonat",level:3},{value:"barTreeToList",id:"bartreetolist",level:3},{value:"barFlat",id:"barflat",level:3},{value:"barHas",id:"barhas",level:3},{value:"barToRow",id:"bartorow",level:3},{value:"rowFromBar",id:"rowfrombar",level:3},{value:"barToList",id:"bartolist",level:3},{value:"barFromRow",id:"barfromrow",level:3},{value:"barFromList",id:"barfromlist",level:3},{value:"barFromListRev",id:"barfromlistrev",level:3},{value:"rowToBar",id:"rowtobar",level:3},{value:"barMap",id:"barmap",level:3},{value:"barFilter",id:"barfilter",level:3},{value:"barFindIndex",id:"barfindindex",level:3},{value:"barFindIndexOff",id:"barfindindexoff",level:3},{value:"barElemIndex",id:"barelemindex",level:3},{value:"barElemIndexOff",id:"barelemindexoff",level:3},{value:"barElemIndexEnd",id:"barelemindexend",level:3},{value:"barSplitAt",id:"barsplitat",level:3},{value:"barSplitOne",id:"barsplitone",level:3},{value:"barSplitOneWith",id:"barsplitonewith",level:3},{value:"barSplitWith",id:"barsplitwith",level:3},{value:"barSplit",id:"barsplit",level:3},{value:"barCountHeadMatching",id:"barcountheadmatching",level:3},{value:"barDropWhile",id:"bardropwhile",level:3},{value:"barTakeWhile",id:"bartakewhile",level:3},{value:"hexAlphabet",id:"hexalphabet",level:3},{value:"hexChar",id:"hexchar",level:3},{value:"byteToHex",id:"bytetohex",level:3},{value:"barToHex",id:"bartohex",level:3},{value:"readBarLit",id:"readbarlit",level:3},{value:"showBarLit",id:"showbarlit",level:3},{value:"getHexBar",id:"gethexbar",level:3},{value:"barLoadDecimal",id:"barloaddecimal",level:3},{value:"barShowDecimal",id:"barshowdecimal",level:3},{value:"barIsPrefixOf",id:"barisprefixof",level:3},{value:"barSubstringSearch",id:"barsubstringsearch",level:3},{value:"barSpace",id:"barspace",level:3}];function t(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"bars-byte-arrays",children:"Bars (byte arrays)"})}),"\n",(0,n.jsx)(a.h3,{id:"b"}),"\n",(0,n.jsx)(a.p,{children:"Macro for creating ASCII bar literals."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"# b {hello}    == b#hello\n# b {}         == b#{}\n# b {123}      == b#123\n"})}),"\n",(0,n.jsx)(a.h3,{id:"x"}),"\n",(0,n.jsx)(a.p,{children:"Macro for creating hexadecimal bar literals."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"# x deadbeef    == x#deadbeef\n# x 00          == x#00\n# x {}          == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"padbar",children:"padBar"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{children:"(padBar p)\n> p : Pad a\n> Bar a\n"})}),"\n",(0,n.jsx)(a.p,{children:"Converts a pad to a bar, adding zeroes to make it into whole bytes if necessary."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"padBar p#11111111     == x#ff\npadBar p#111111111    == x#ff01\npadBar p#1            == x#01\n"})}),"\n",(0,n.jsx)(a.h3,{id:"isbar",children:"isBar"}),"\n",(0,n.jsx)(a.p,{children:"Checks if a value is a bar (byte array)."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"isBar b#hello       == 1\nisBar x#deadbeef    == 1\nisBar 42            == 0\n"})}),"\n",(0,n.jsx)(a.h3,{id:"emptybar",children:"emptyBar"}),"\n",(0,n.jsx)(a.p,{children:"Returns an empty bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"emptyBar               == b#{}\nbarLen emptyBar        == 0\nbarIsEmpty emptyBar    == 1\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barisempty",children:"barIsEmpty"}),"\n",(0,n.jsx)(a.p,{children:"Checks if a bar is empty."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barIsEmpty b#{}    == 1\nbarIsEmpty b#a     == 0\nbarIsEmpty x#00    == 0\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bytewidth",children:"byteWidth"}),"\n",(0,n.jsx)(a.p,{children:"Returns the number of bytes needed to represent a natural number."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"byteWidth 0      == 0\nbyteWidth 255    == 1\nbyteWidth 256    == 2\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bartrail",children:"barTrail"}),"\n",(0,n.jsx)(a.p,{children:"Returns the number of trailing zero bytes in a bar's internal representation."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barTrail 0x1ff        == 0\nbarTrail 0x100ff      == 1\nbarTrail 0x10000ff    == 2\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barenc",children:"barEnc"}),"\n",(0,n.jsx)(a.p,{children:"Encodes a natural number into a bar representation."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barEnc 0 0      == 1\nbarEnc 0 1      == 257\nbarEnc 0 255    == 511\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bardec",children:"barDec"}),"\n",(0,n.jsx)(a.p,{children:"Decodes a bar representation back into a natural number."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barDec 1      == 0\nbarDec 257    == 1\nbarDec 511    == 255\n"})}),"\n",(0,n.jsx)(a.h3,{id:"mkbar",children:"mkBar"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar from a natural number and a trailing zero count."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"mkBar 0 0      == b#{}\nmkBar 0 1      == x#01\nmkBar 1 255    == x#ff00\n"})}),"\n",(0,n.jsx)(a.h3,{id:"natbar",children:"natBar"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar from a natural number."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"natBar 0      == b#{}\nnatBar 1      == x#01\nnatBar 255    == x#ff\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barnat",children:"barNat"}),"\n",(0,n.jsx)(a.p,{children:"Converts a bar to its natural number representation."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barNat b#{}    == 0\nbarNat x#01    == 1\nbarNat x#ff    == 255\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barlen",children:"barLen"}),"\n",(0,n.jsx)(a.p,{children:"Returns the length of a bar in bytes."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barLen b#{}          == 0\nbarLen b#hello       == 5\nbarLen x#deadbeef    == 4\n"})}),"\n",(0,n.jsx)(a.h3,{id:"baridx",children:"barIdx"}),"\n",(0,n.jsx)(a.p,{children:"Returns the byte at a given index in a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barIdx 0 b#hello    == %h\nbarIdx 1 b#hello    == %e\nbarIdx 4 b#hello    == %o\n"})}),"\n",(0,n.jsx)(a.h3,{id:"nattosizedbar",children:"natToSizedBar"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar of a specific size from a natural number."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"natToSizedBar 4 0x11223344    == x#44332211\nnatToSizedBar 2 0x1122        == x#2211\nnatToSizedBar 4 0x11          == x#11000000\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barsing",children:"barSing"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar containing a single byte."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barSing %a     == b#a\nbarSing 0      == x#00\nbarSing 255    == x#ff\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barduo",children:"barDuo"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar containing two bytes."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barDuo %a %b      == b#ab\nbarDuo 0 1        == x#0001\nbarDuo 255 254    == x#fffe\n"})}),"\n",(0,n.jsx)(a.h3,{id:"zend",children:"zEnd"}),"\n",(0,n.jsx)(a.p,{children:"Returns the number of trailing zero bytes in a row."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"zEnd [1 2 3 0 0]    == 2\nzEnd [0 0 0]        == 3\nzEnd [1 2 3]        == 0\n"})}),"\n",(0,n.jsx)(a.h3,{id:"stripzend",children:"stripZEnd"}),"\n",(0,n.jsx)(a.p,{children:"Removes trailing zero bytes from a row."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"stripZEnd [1 2 3 0 0]    == [1 2 3]\nstripZEnd [0 0 0]        == []\nstripZEnd [1 2 3]        == [1 2 3]\n"})}),"\n",(0,n.jsx)(a.h3,{id:"w8",children:"w8"}),"\n",(0,n.jsx)(a.p,{children:"Converts a number to an 8-bit value (0-255)."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"w8 255    == 255\nw8 256    == 0\nw8 257    == 1\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bytesbar",children:"bytesBar"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar from a row of bytes."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"bytesBar [104 101 108 108 111]    == b#hello\nbytesBar [0 255 1]                == x#00ff01\nbytesBar []                       == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bargen",children:"barGen"}),"\n",(0,n.jsx)(a.p,{children:"Generates a bar by applying a function to each index."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barGen 3 (mul 2)    == x#000204\nbarGen 4 id         == x#00010203\nbarGen 0 id         == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barrep",children:"barRep"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar by repeating a byte value."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barRep 3 %a    == b#aaa\nbarRep 2 0     == x#0000\nbarRep 0 %x    == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barget",children:"barGet"}),"\n",(0,n.jsx)(a.p,{children:"Gets the byte at a specific index in a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barGet b#hello 0       == %h\nbarGet b#hello 4       == %o\nbarGet x#deadbeef 2    == 190 ; [222 173 190 239]\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barbytes",children:"barBytes"}),"\n",(0,n.jsx)(a.p,{children:"Converts a bar to a row of bytes."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barBytes b#hello       == [%h %e %l %l %o]\nbarBytes x#deadbeef    == [222 173 190 239]\nbarBytes b#{}          == []\n"})}),"\n",(0,n.jsx)(a.h2,{id:"barfoldl",children:"barFoldl"}),"\n",(0,n.jsx)(a.p,{children:"Left-associative fold over a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barFoldl add 0 b#abc       == 294\nbarFoldl add 1 b#{}        == 1\nbarFoldl mul 1 x#010203    == 6\n"})}),"\n",(0,n.jsx)(a.h2,{id:"barfoldr",children:"barFoldr"}),"\n",(0,n.jsx)(a.p,{children:"Right-associative fold over a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barFoldr add 0 b#abc                    == 294\nbarFoldr (_ acc & inc acc) 0 b#hello    == 5\nbarFoldr mul 1 x#010203                 == 6\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barany",children:"barAny"}),"\n",(0,n.jsx)(a.p,{children:"Checks if any byte in the bar satisfies a predicate."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barAny (eql %a) b#hello        == 0\nbarAny (eql %h) b#hello        == 1\nbarAny (gte 200) x#deadbeef    == 1\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barall",children:"barAll"}),"\n",(0,n.jsx)(a.p,{children:"Checks if all bytes in the bar satisfy a predicate."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barAll (gte %a) b#hello        == 0\nbarAll (eql %a) b#aaaaa        == 1\nbarAll (lte 200) x#deadbeef    == 0\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barweld",children:"barWeld"}),"\n",(0,n.jsx)(a.p,{children:"Concatenates two bars."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barWeld b#hello b#world    == b#helloworld\nbarWeld x#dead x#beef      == x#deadbeef\nbarWeld b#{} b#abc         == b#abc\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barcat",children:"barCat"}),"\n",(0,n.jsx)(a.p,{children:"Concatenates a row of bars."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barCat [b#hello b#world b#{!}]    == b#{helloworld!}\nbarCat [x#de x#ad x#be x#ef]      == x#deadbeef\nbarCat [b#{} b#a b#{} b#b]        == b#ab\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barcatlist",children:"barCatList"}),"\n",(0,n.jsx)(a.p,{children:"Concatenates a list of bars."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barCatList (CONS b#hello (CONS b#world NIL))    == b#helloworld\nbarCatList (CONS x#dead (CONS x#beef NIL))      == x#deadbeef\nbarCatList NIL                                  == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barcatmap",children:"barCatMap"}),"\n",(0,n.jsx)(a.p,{children:"Maps a function over a bar and concatenates the results."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barCatMap (x & barRep 2 x) b#abc          == b#aabbcc\nbarCatMap (x & barFromRow [x x]) b#123    == b#112233\nbarCatMap (const b#{-}) b#abc             == b#{---}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barintercalate",children:"barIntercalate"}),"\n",(0,n.jsx)(a.p,{children:"Intersperses a separator bar between the elements of a row of bars."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barIntercalate b#_ [b#a b#b b#c]         == b#a_b_c\nbarIntercalate x#00 [x#11 x#22 x#33]     == x#110022003300\nbarIntercalate b#{} [b#hello b#world]    == b#helloworld\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barintercalatelist",children:"barIntercalateList"}),"\n",(0,n.jsx)(a.p,{children:"Intersperses a separator bar between the elements of a list of bars."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barIntercalateList b#_ ~[b#a b#b b#c]                              == b#a_b_c\nbarIntercalateList x#00 (CONS x#11 (CONS x#22 (CONS x#33 NIL)))    == x#110022003300\nbarIntercalateList b#{} (CONS b#hello (CONS b#world NIL))          == b#helloworld\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barfromhex",children:"barFromHex"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar from a hexadecimal string."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barFromHex {deadbeef}      == x#deadbeef\nbarFromHex {68656C6C6F}    == b#hello\nbarFromHex {}              == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barpad",children:"barPad"}),"\n",(0,n.jsx)(a.p,{children:"Returns the internal pad representation of a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barPad b#a           == p#10000110\nbarPad x#deadbeef    == p#01111011101101010111110111110111\nbarPad b#{}          == p#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bartake",children:"barTake"}),"\n",(0,n.jsx)(a.p,{children:"Takes the first n bytes from a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barTake 3 b#hello    == b#hel\nbarTake 5 b#hi       == b#hi\nbarTake 0 b#world    == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bardrop",children:"barDrop"}),"\n",(0,n.jsx)(a.p,{children:"Drops the first n bytes from a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barDrop 3 b#hello    == b#lo\nbarDrop 5 b#hi       == b#{}\nbarDrop 0 b#world    == b#world\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barslice",children:"barSlice"}),"\n",(0,n.jsx)(a.p,{children:"Takes a slice of a bar from a starting index with a given length."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barSlice 1 3 b#hello       == b#ell\nbarSlice 0 2 x#deadbeef    == x#dead\nbarSlice 4 1 b#hello       == b#o\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barslicetonat",children:"barSliceToNat"}),"\n",(0,n.jsx)(a.p,{children:"Converts a slice of a bar to a natural number."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barSliceToNat 0 4 x#deadbeef    == 0xdeadbeef\nbarSliceToNat 1 2 x#deadbeef    == 0xadbe\nbarSliceToNat 3 1 b#hello       == 0x6f\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bartreetolist",children:"barTreeToList"}),"\n",(0,n.jsx)(a.p,{children:"Converts a tree-like structure of bars to a flat list of bars."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barTreeToList b#hello                      == [b#hello 0]\nbarTreeToList [b#a b#b b#c]                == [b#a [b#b [b#c 0]]]\nbarTreeToList (0 [[b#foo] b#bar b#baz])    == [b#foo [b#bar [b#baz 0]]]\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barflat",children:"barFlat"}),"\n",(0,n.jsx)(a.p,{children:"Flattens a tree-like structure of bars into a single bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barFlat b#hello                      == b#hello\nbarFlat [b#a b#b b#c]                == b#abc\nbarFlat (0 [[b#foo] b#bar b#baz])    == b#foobarbaz\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barhas",children:"barHas"}),"\n",(0,n.jsx)(a.p,{children:"Checks if a bar contains a specific byte."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barHas %h b#hello         == 1\nbarHas %x b#hello         == 0\nbarHas 0xde x#deadbeef    == 1\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bartorow",children:"barToRow"}),"\n",(0,n.jsx)(a.p,{children:"Converts a bar to a row of bytes (alias for barBytes)."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barToRow b#hello       == [%h %e %l %l %o] ; [104 101 108 108 111]\nbarToRow x#deadbeef    == [222 173 190 239]\nbarToRow b#{}          == []\n"})}),"\n",(0,n.jsx)(a.h3,{id:"rowfrombar",children:"rowFromBar"}),"\n",(0,n.jsx)(a.p,{children:"Converts a bar to a row of bytes (alias for barBytes)."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"rowFromBar b#hello       == [%h %e %l %l %o]\nrowFromBar x#deadbeef    == [222 173 190 239]\nrowFromBar b#{}          == []\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bartolist",children:"barToList"}),"\n",(0,n.jsx)(a.p,{children:"Converts a bar to a list of bytes."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barToList b#abc      == [%a [%b [%c 0]]]\nbarToList x#1234     == [18 [52 0]] ; [0x12 [0x34 0]]\nbarToList b#{}       == 0\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barfromrow",children:"barFromRow"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar from a row of bytes."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barFromRow [104 101 108 108 111]    == b#hello\nbarFromRow [0xde 0xad 0xbe 0xef]    == x#deadbeef\nbarFromRow []                       == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barfromlist",children:"barFromList"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar from a list of bytes."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barFromList [%a [%b [%c 0]]]    == b#abc\nbarFromList [0x12 [0x34 0]]     == x#1234\nbarFromList 0                   == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barfromlistrev",children:"barFromListRev"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar from a reversed list of bytes."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barFromListRev [%c [%b [%a 0]]]    == b#abc\nbarFromListRev [0x34 [0x12 0]]     == x#1234\nbarFromListRev 0                   == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"rowtobar",children:"rowToBar"}),"\n",(0,n.jsx)(a.p,{children:"Creates a bar from a row of bytes (alias for barFromRow)."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"rowToBar [104 101 108 108 111]    == b#hello\nrowToBar [0xde 0xad 0xbe 0xef]    == x#deadbeef\nrowToBar []                       == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barmap",children:"barMap"}),"\n",(0,n.jsx)(a.p,{children:"Applies a function to each byte in a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barMap (add 1) b#abc        == b#bcd\nbarMap (mul 2) x#0102       == x#0204\nbarMap (const 0) b#hello    == x#0000000000\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barfilter",children:"barFilter"}),"\n",(0,n.jsx)(a.p,{children:"Keeps only the bytes in a bar that satisfy a predicate."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barFilter (neq %l) b#hello         == b#heo\nbarFilter (gte 0xc0) x#deadbeef    == x#adbe\nbarFilter (const 1) b#abc          == b#abc\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barfindindex",children:"barFindIndex"}),"\n",(0,n.jsx)(a.p,{children:"Finds the index of the first byte satisfying a predicate."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barFindIndex (eql %l) b#hello         == (0 2) ; SOME 2\nbarFindIndex (gte 0xc0) x#deadbeef    == (0 1) ; SOME 1\nbarFindIndex (const 0) b#abc          == 0 ; NONE\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barfindindexoff",children:"barFindIndexOff"}),"\n",(0,n.jsx)(a.p,{children:"Finds the index of the first byte satisfying a predicate, starting from an offset."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barFindIndexOff (eql %l) 1 b#hello         == 2\nbarFindIndexOff (gte 0xc0) 1 x#deadbeef    == 1\nbarFindIndexOff (const 0) 0 b#abc          == 3\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barelemindex",children:"barElemIndex"}),"\n",(0,n.jsx)(a.p,{children:"Finds the index of the first occurrence of a byte."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barElemIndex %l b#hello         == (0 2) ; SOME 2\nbarElemIndex 0xde x#deadbeef    == (0 0) ; SOME 0\nbarElemIndex %x b#abc           == 0 ; NONE\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barelemindexoff",children:"barElemIndexOff"}),"\n",(0,n.jsx)(a.p,{children:"Finds the index of the first occurrence of a byte, starting from an offset."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barElemIndexOff %l 1 b#hello         == 2\nbarElemIndexOff 0xde 1 x#deadbeef    == 4\nbarElemIndexOff %x 0 b#abc           == 3\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barelemindexend",children:"barElemIndexEnd"}),"\n",(0,n.jsx)(a.p,{children:"Finds the index of the last occurrence of a byte."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barElemIndexEnd %l b#hello         == (0 3) ; SOME 3\nbarElemIndexEnd 0xef x#deadbeef    == (0 3) ; SOME 3\nbarElemIndexEnd %x b#abc           == (0 0) ; NONE\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barsplitat",children:"barSplitAt"}),"\n",(0,n.jsx)(a.p,{children:"Splits a bar at a given index."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barSplitAt 2 b#hello       == [b#he b#llo]\nbarSplitAt 4 x#deadbeef    == [x#deadbeef b#{}]\nbarSplitAt 1 b#abc         == [b#a b#bc]\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barsplitone",children:"barSplitOne"}),"\n",(0,n.jsx)(a.p,{children:"Splits a bar at the first occurrence of a byte."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barSplitOne %l b#hello         == [b#he b#lo]\nbarSplitOne 0xad x#deadbeef    == [x#de x#beef]\nbarSplitOne %x b#abc           == [b#abc b#{}]\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barsplitonewith",children:"barSplitOneWith"}),"\n",(0,n.jsx)(a.p,{children:"Splits a bar at the first occurrence of a byte satisfying a predicate."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barSplitOneWith (eql %l) b#hello         == [b#he b#lo]\nbarSplitOneWith (gte 0xc0) x#deadbeef    == [x#de x#beef]\nbarSplitOneWith (const 0) b#abc          == [b#abc b#{}]\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barsplitwith",children:"barSplitWith"}),"\n",(0,n.jsx)(a.p,{children:"Splits a bar at all occurrences of bytes satisfying a predicate."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barSplitWith (eql %l) b#hello         == [b#he [b#{} [b#o 0]]]\nbarSplitWith (gte 0xc0) x#deadbeef    == [x#de [b#{} [x#ef 0]]]\nbarSplitWith (const 0) b#abc          == [b#abc 0]\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barsplit",children:"barSplit"}),"\n",(0,n.jsx)(a.p,{children:"Splits a bar at all occurrences of a specific byte."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barSplit %l b#hello         == [b#he [b#{} [b#o 0]]]\nbarSplit 0xad x#deadbeef    == [x#de [x#beef 0]]\nbarSplit %x b#abc           == [b#abc 0]\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barcountheadmatching",children:"barCountHeadMatching"}),"\n",(0,n.jsx)(a.p,{children:"Counts the number of leading bytes until a predicate fails."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barCountHeadMatching (eql %h) b#hello         == (0 1) ; SOME 1\nbarCountHeadMatching (neq 0xbe) x#deadbeef    == (0 2) ; SOME 2\nbarCountHeadMatching (neq %d) b#abc           == 0 ; NONE\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bardropwhile",children:"barDropWhile"}),"\n",(0,n.jsx)(a.p,{children:"Drops leading bytes from a bar while they satisfy a predicate."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barDropWhile (eql %h) b#hello         == b#ello\nbarDropWhile (lte 0xbe) x#deadbeef    == x#adbeef\nbarDropWhile (const 0) b#abc          == b#abc\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bartakewhile",children:"barTakeWhile"}),"\n",(0,n.jsx)(a.p,{children:"Takes leading bytes from a bar while they satisfy a predicate."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barTakeWhile (eql %h) b#hello         == b#h\nbarTakeWhile (lte 0xbe) x#deadbeef    == x#de\nbarTakeWhile (const 1) b#abc          == b#abc\n"})}),"\n",(0,n.jsx)(a.h3,{id:"hexalphabet",children:"hexAlphabet"}),"\n",(0,n.jsx)(a.p,{children:"A bar containing the hexadecimal digits (0-9, a-f)."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"hexAlphabet              == b#0123456789abcdef\nbarLen hexAlphabet       == 16\nbarIdx 10 hexAlphabet    == %a\n"})}),"\n",(0,n.jsx)(a.h3,{id:"hexchar",children:"hexChar"}),"\n",(0,n.jsx)(a.p,{children:"Converts a number (0-15) to its hexadecimal character representation."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"hexChar 0     == 48\nhexChar 9     == 57\nhexChar 15    == %f\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bytetohex",children:"byteToHex"}),"\n",(0,n.jsx)(a.p,{children:"Converts a byte to its two-character hexadecimal representation."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"byteToHex 0      == b#00\nbyteToHex 255    == b#ff\nbyteToHex 171    == b#ab\n"})}),"\n",(0,n.jsx)(a.h3,{id:"bartohex",children:"barToHex"}),"\n",(0,n.jsx)(a.p,{children:"Converts a bar to its hexadecimal string representation."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barToHex b#hello       == b#68656c6c6f\nbarToHex x#deadbeef    == b#deadbeef\nbarToHex b#{}          == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"readbarlit",children:"readBarLit"}),"\n",(0,n.jsx)(a.p,{children:"Parses a bar literal from a Rex expression."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"readBarLit '(b#hello) v2 id       == b#hello\nreadBarLit '(x#deadbeef) v2 id    == x#deadbeef\nreadBarLit '(b#{}) v2 id          == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"showbarlit",children:"showBarLit"}),"\n",(0,n.jsx)(a.p,{children:"Converts a bar to its Rex literal representation."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"showBarLit b#hello       == b#{hello}\nshowBarLit x#deadbeef    == x#{deadbeef}\nshowBarLit b#{}          == b#{}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"gethexbar",children:"getHexBar"}),"\n",(0,n.jsx)(a.p,{children:"Parses a bar containing an ascii string as a hexadecimal number, passing the corresponding Nat to a continuation function or returning a fallback value."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"getHexBar b#ff 0 natBar       == x#ff ; note the difference between b# and x#\ngetHexBar b#deadbeef 0 dec    == 0xdeadbeef\ngetHexBar b#xyz 42 id         == 42\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barloaddecimal",children:"barLoadDecimal"}),"\n",(0,n.jsx)(a.p,{children:"Parses a decimal number from a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barLoadDecimal b#123           == 123\nbarLoadDecimal b#0             == 0\nbarLoadDecimal b#9876543210    == 9876543210\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barshowdecimal",children:"barShowDecimal"}),"\n",(0,n.jsx)(a.p,{children:"Converts a natural number to its decimal string representation as a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barShowDecimal 123           == b#123\nbarShowDecimal 0             == b#0\nbarShowDecimal 9876543210    == b#9876543210\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barisprefixof",children:"barIsPrefixOf"}),"\n",(0,n.jsx)(a.p,{children:"Checks if a bar is a prefix of another bar at a given offset."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barIsPrefixOf b#he b#hello 0    == 1\nbarIsPrefixOf b#el b#hello 1    == 1\nbarIsPrefixOf b#lo b#hello 1    == 0\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barsubstringsearch",children:"barSubstringSearch"}),"\n",(0,n.jsx)(a.p,{children:"Finds all occurrences of a substring in a bar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barSubstringSearch b#l b#hello    == [2 [3 0]]\nbarSubstringSearch b#o b#hello    == [4 0]\nbarSubstringSearch b#x b#hello    == 0\n"})}),"\n",(0,n.jsx)(a.h3,{id:"barspace",children:"barSpace"}),"\n",(0,n.jsx)(a.p,{children:"A bar containing a single space character."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sire",children:"barSpace             == b#{ }\nbarLen barSpace      == 1\nbarIdx 0 barSpace    == 32\n"})})]})}function h(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(t,{...e})}):t(e)}},8453:(e,a,r)=>{r.d(a,{R:()=>b,x:()=>s});var n=r(6540);const l={},i=n.createContext(l);function b(e){const a=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:b(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);