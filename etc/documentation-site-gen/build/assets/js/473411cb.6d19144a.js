"use strict";(self.webpackChunkpallas=self.webpackChunkpallas||[]).push([[800],{7418:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var s=i(4848),r=i(8453);const a={},l="Natural Numbers",d={id:"reference/standard-library/natural-numbers",title:"Natural Numbers",description:"Type signatures are provisional and may contain errors.",source:"@site/../../doc/reference/standard-library/02_natural-numbers.md",sourceDirName:"reference/standard-library",slug:"/reference/standard-library/natural-numbers",permalink:"/docs/reference/standard-library/natural-numbers",draft:!1,unlisted:!1,editUrl:"https://github.com/operating-function/pallas/edit/main/doc/../../doc/reference/standard-library/02_natural-numbers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"referenceSidebar",previous:{title:"Bits (Booleans)",permalink:"/docs/reference/standard-library/bits-booleans"},next:{title:"Comparisons",permalink:"/docs/reference/standard-library/comparisons"}},t={},c=[{value:"Basic Operations",id:"basic-operations",level:2},{value:"isNat",id:"isnat",level:3},{value:"toNat",id:"tonat",level:3},{value:"times",id:"times",level:3},{value:"inc",id:"inc",level:3},{value:"dec",id:"dec",level:3},{value:"add",id:"add",level:3},{value:"sub",id:"sub",level:3},{value:"mod",id:"mod",level:3},{value:"mul",id:"mul",level:3},{value:"div",id:"div",level:3},{value:"divMod",id:"divmod",level:3},{value:"isOne",id:"isone",level:3},{value:"Bitwise Operations",id:"bitwise-operations",level:2},{value:"lsh",id:"lsh",level:3},{value:"rsh",id:"rsh",level:3},{value:"con",id:"con",level:3},{value:"mix",id:"mix",level:3},{value:"dis",id:"dis",level:3},{value:"pow",id:"pow",level:3},{value:"bex",id:"bex",level:3},{value:"bix",id:"bix",level:3},{value:"natEql",id:"nateql",level:3},{value:"natCmp",id:"natcmp",level:3},{value:"Advanced Bitwise Operations",id:"advanced-bitwise-operations",level:2},{value:"bitwise",id:"bitwise",level:3},{value:"natFold",id:"natfold",level:3},{value:"met",id:"met",level:3},{value:"popCount",id:"popcount",level:3},{value:"trunc",id:"trunc",level:3},{value:"bitSlice",id:"bitslice",level:3},{value:"setBit",id:"setbit",level:3},{value:"clearBit",id:"clearbit",level:3},{value:"testBit",id:"testbit",level:3},{value:"Miscellaneous",id:"miscellaneous",level:2},{value:"roundUp",id:"roundup",level:3},{value:"even",id:"even",level:3},{value:"odd",id:"odd",level:3}];function o(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"natural-numbers",children:"Natural Numbers"})}),"\n",(0,s.jsx)(e.admonition,{type:"warning",children:(0,s.jsx)(e.p,{children:"Type signatures are provisional and may contain errors."})}),"\n",(0,s.jsx)(e.h2,{id:"basic-operations",children:"Basic Operations"}),"\n",(0,s.jsx)(e.h3,{id:"isnat",children:"isNat"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(isNat n)\n> n : a\n> Bool\n"})}),"\n",(0,s.jsx)(e.p,{children:"Checks if a value is a natural number."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"isNat 5       == 1\nisNat 0       == 1\nisNat SOME    == 0\nisNat b#hi    == 0\n"})}),"\n",(0,s.jsx)(e.h3,{id:"tonat",children:"toNat"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(toNat n)\n> n : a\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Converts a value to a natural number. If the input is already a natural number, it returns it unchanged."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"toNat 5       == 5\ntoNat 0       == 0\ntoNat SOME    == 0 ; Non-numbers become 0\ntoNat b#hi    == 0\n"})}),"\n",(0,s.jsx)(e.h3,{id:"times",children:"times"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(times f z n)\n> f : (a > b)\n> z : a\n> n : Nat\n> b\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Applies a function ",(0,s.jsx)(e.code,{children:"f"})," to an initial value ",(0,s.jsx)(e.code,{children:"z"}),", ",(0,s.jsx)(e.code,{children:"x"})," times."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"times inc 0 3        == 3\ntimes (mul 2) 1 4    == 16\ntimes (add 2) 0 3    == 6\n"})}),"\n",(0,s.jsx)(e.h3,{id:"inc",children:"inc"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(inc n)\n> n : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Increments a natural number by 1."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"inc 0      == 1\ninc 5      == 6\ninc 255    == 256\n"})}),"\n",(0,s.jsx)(e.h3,{id:"dec",children:"dec"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(dec n)\n> n : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Decrements a natural number by 1. Returns 0 if the input is 0."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"dec 0      == 0\ndec 1      == 0\ndec 5      == 4\ndec 256    == 255\n"})}),"\n",(0,s.jsx)(e.h3,{id:"add",children:"add"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(add x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Adds two natural numbers."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"add 3 4      == 7\nadd 0 5      == 5\nadd 255 1    == 256\n"})}),"\n",(0,s.jsx)(e.h3,{id:"sub",children:"sub"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(sub x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Subtracts one natural number from another. Returns 0 if the result would be negative."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"sub 5 3      == 2\nsub 3 5      == 0\nsub 0 1      == 0\nsub 256 1    == 255\n"})}),"\n",(0,s.jsx)(e.h3,{id:"mod",children:"mod"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(mod x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Calculates the modulus of two natural numbers."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"mod 7 3     == 1\nmod 6 3     == 0\nmod 5 10    == 5\nmod 0 5     == 0\n"})}),"\n",(0,s.jsx)(e.h3,{id:"mul",children:"mul"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(mul x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Multiplies two natural numbers."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"mul 3 4      == 12\nmul 0 5      == 0\nmul 255 2    == 510\n"})}),"\n",(0,s.jsx)(e.h3,{id:"div",children:"div"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(div x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Performs integer division on two natural numbers. Division by zero returns 0."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"div 6 3     == 2\ndiv 7 3     == 2\ndiv 5 10    == 0\ndiv 5 0     == 0\n"})}),"\n",(0,s.jsx)(e.h3,{id:"divmod",children:"divMod"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(divMod x y)\n> x : Nat\n> y : Nat\n> SOME\n"})}),"\n",(0,s.jsx)(e.p,{children:"Performs both division and modulus in one operation. Returns a tuple of (quotient, remainder)."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"divMod 7 3     == (0 2 1)\ndivMod 6 3     == (0 2 0)\ndivMod 5 10    == (0 0 5)\ndivMod 5 0     ; Division by zero, this will crash the REPL\n"})}),"\n",(0,s.jsx)(e.h3,{id:"isone",children:"isOne"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(isOne n)\n> x : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Checks if a natural number is equal to 1."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"isOne 1    == 1\nisOne 0    == 0\nisOne 2    == 0\n"})}),"\n",(0,s.jsx)(e.h2,{id:"bitwise-operations",children:"Bitwise Operations"}),"\n",(0,s.jsx)(e.h3,{id:"lsh",children:"lsh"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(lsh x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Left-shifts a natural number by a given amount."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"lsh 1 3    == 8     ; 1 << 3 = 8\nlsh 5 2    == 20    ; 5 << 2 = 20\nlsh 8 1    == 16    ; 8 << 1 = 16\n"})}),"\n",(0,s.jsx)(e.h3,{id:"rsh",children:"rsh"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(rsh x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Right-shifts a natural number by a given amount."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"rsh 8 3     == 1    ; 8 >> 3 = 1\nrsh 20 2    == 5    ; 20 >> 2 = 5\nrsh 16 1    == 8    ; 16 >> 1 = 8\n"})}),"\n",(0,s.jsx)(e.h3,{id:"con",children:"con"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(con x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Performs a bitwise AND operation on two natural numbers."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"con 5 3      == 1    ; 0101 & 0011 = 0001\ncon 12 10    == 8    ; 1100 & 1010 = 1000\ncon 15 7     == 7    ; 1111 & 0111 = 0111\n"})}),"\n",(0,s.jsx)(e.h3,{id:"mix",children:"mix"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(mix x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Performs a bitwise XOR operation on two natural numbers."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"mix 5 3      == 6    ; 0101 ^ 0011 = 0110\nmix 12 10    == 6    ; 1100 ^ 1010 = 0110\nmix 15 7     == 8    ; 1111 ^ 0111 = 1000\n"})}),"\n",(0,s.jsx)(e.h3,{id:"dis",children:"dis"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(dis x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Performs a bitwise OR operation on two natural numbers."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"dis 5 3      == 7     ; 0101 | 0011 = 0111\ndis 12 10    == 14    ; 1100 | 1010 = 1110\ndis 15 7     == 15    ; 1111 | 0111 = 1111\n"})}),"\n",(0,s.jsx)(e.h3,{id:"pow",children:"pow"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(pow b p)\n> b : Nat\n> p : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Raises a base to a power."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"pow 2 3    == 8\npow 3 2    == 9\npow 5 0    == 1\npow 0 5    == 0\n"})}),"\n",(0,s.jsx)(e.h3,{id:"bex",children:"bex"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(bex p)\n> p : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Calculates 2 raised to a given power."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"bex 3    == 8     ; 2^3 = 8\nbex 5    == 32    ; 2^5 = 32\nbex 0    == 1     ; 2^0 = 1\n"})}),"\n",(0,s.jsx)(e.h3,{id:"bix",children:"bix"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(bix i n)\n> i : Nat\n> n : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Extracts a specific bit from a natural number."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"bix 0 8    == 0    ; Least significant bit of 8 (1000) is 0\nbix 3 8    == 1    ; 4th bit of 8 (1000) is 1\nbix 2 7    == 1    ; 3rd bit of 7 (0111) is 1\n"})}),"\n",(0,s.jsx)(e.h3,{id:"nateql",children:"natEql"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(natEql x y)\n> x : Nat\n> y : Nat\n> Bool\n"})}),"\n",(0,s.jsx)(e.p,{children:"Checks if two natural numbers are equal."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"natEql 5 5     == 1    ; TRUE\nnatEql 3 5     == 0    ; FALSE\nnatEql 0 0     == 1    ; TRUE\n"})}),"\n",(0,s.jsx)(e.h3,{id:"natcmp",children:"natCmp"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(natCmp x y)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Compares two natural numbers, returning an ordering result."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"natCmp 3 5    == 0    ; LT\nnatCmp 5 3    == 2    ; GT\nnatCmp 4 4    == 1    ; EQ\n"})}),"\n",(0,s.jsx)(e.h2,{id:"advanced-bitwise-operations",children:"Advanced Bitwise Operations"}),"\n",(0,s.jsx)(e.h3,{id:"bitwise",children:"bitwise"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(bitwise f x y)\n> f : (Nat > Nat > Nat)\n> x : Nat\n> y : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Applies a bitwise operation to two natural numbers."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"bitwise and 5 3    == 1    ; 0101 & 0011 = 0001\nbitwise or  5 3    == 7    ; 0101 | 0011 = 0111\nbitwise xor 5 3    == 6    ; 0101 ^ 0011 = 0110\n"})}),"\n",(0,s.jsx)(e.h3,{id:"natfold",children:"natFold"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(natFold f z n)\n> f : (a > Nat > a)\n> z : a\n> n : Nat\n> a\n"})}),"\n",(0,s.jsx)(e.p,{children:"Folds a function over the bits of a natural number."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"natFold add 0 5     == 2    ; Sum of bits in 5 (0101)\nnatFold or  0 10    == 1    ; OR of all bits in 10 (1010)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"met",children:"met"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(met n)\n> n : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Calculates the number of bits required to represent a natural number."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"met 0      == 0\nmet 1      == 1\nmet 7      == 3\nmet 8      == 4\nmet 255    == 8\nmet 256    == 9\n"})}),"\n",(0,s.jsx)(e.h3,{id:"popcount",children:"popCount"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(popCount n)\n> n : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Counts the number of set bits in a natural number."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"popCount 0     == 0\npopCount 1     == 1\npopCount 7     == 3    ; 0111 has 3 set bits\npopCount 15    == 4    ; 1111 has 4 set bits\n"})}),"\n",(0,s.jsx)(e.h3,{id:"trunc",children:"trunc"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(trunc w n)\n> w : Nat\n> n : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Truncates a natural number to a given bit width."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"trunc 3 13    == 5\ntrunc 2 7     == 3     ; 7 (111) truncated to 2 bits is 3 (11)\ntrunc 4 15    == 15    ; 15 (1111) truncated to 4 bits is still 15\n"})}),"\n",(0,s.jsx)(e.h3,{id:"bitslice",children:"bitSlice"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(bitSlice o w n)\n> o : Nat\n> w : Nat\n> n : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Extracts a slice of bits from a natural number."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"bitSlice 0 3 13    == 5\nbitSlice 1 2 13    == 2    ; Bits 1-2 of 13 (1101) is 2 (10)\nbitSlice 2 2 13    == 3    ; Bits 2-3 of 13 (1101) is 3 (11)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"setbit",children:"setBit"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(setBit i n)\n> i : Nat\n> n : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Sets a specific bit in a natural number."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"setBit 0 4    == 5\nsetBit 2 1    == 5    ; Set 3rd bit of 1 (001) to get 5 (101)\nsetBit 1 6    == 6    ; Setting already-set bit changes nothing\n"})}),"\n",(0,s.jsx)(e.h3,{id:"clearbit",children:"clearBit"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(clearBit i n)\n> i : Nat\n> n : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Clears a specific bit in a natural number."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"clearBit 0 5    == 4\nclearBit 2 7    == 3    ; Clear 3rd bit of 7 (111) to get 3 (011)\nclearBit 1 4    == 4    ; Clearing already-clear bit changes nothing\n"})}),"\n",(0,s.jsx)(e.h3,{id:"testbit",children:"testBit"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(testBit i n)\n> i : Nat\n> n : Nat\n> Nat\n"})}),"\n",(0,s.jsx)(e.p,{children:"Tests if a specific bit is set in a natural number."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"testBit 0 5    == 1\ntestBit 1 5    == 0    ; 2nd bit of 5 (101) is not set\ntestBit 2 5    == 1    ; 3rd bit of 5 (101) is set\n"})}),"\n",(0,s.jsx)(e.h2,{id:"miscellaneous",children:"Miscellaneous"}),"\n",(0,s.jsx)(e.h3,{id:"roundup",children:"roundUp"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(roundUp x y)\n> x : Nat\n> y : Nat\n> Nat\n\nRounds a number up to the nearest multiple of another number.\n\n```sire\nroundUp 5 3    == 6\nroundUp 6 3    == 6\nroundUp 7 3    == 9\nroundUp 0 3    == 0\n"})}),"\n",(0,s.jsx)(e.h3,{id:"even",children:"even"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(even n)\n> n : Nat\n> Bool\n"})}),"\n",(0,s.jsx)(e.p,{children:"Checks if a natural number is even."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"even 0     == 1\neven 1     == 0\neven 2     == 1\neven 15    == 0\n"})}),"\n",(0,s.jsx)(e.h3,{id:"odd",children:"odd"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"(odd n)\n> n : Nat\n> Bool\n"})}),"\n",(0,s.jsx)(e.p,{children:"Checks if a natural number is odd."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sire",children:"odd 0     == 0\nodd 1     == 1\nodd 2     == 0\nodd 15    == 1\n"})})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(o,{...n})}):o(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>d});var s=i(6540);const r={},a=s.createContext(r);function l(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);