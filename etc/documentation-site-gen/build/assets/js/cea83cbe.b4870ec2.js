"use strict";(self.webpackChunkpallas=self.webpackChunkpallas||[]).push([[397],{7321:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>t,metadata:()=>r,toc:()=>c});var n=i(4848),l=i(8453);const t={},a="Lists",r={id:"reference/standard-library/lists",title:"Lists",description:"Lists are zero-terminated, nested row 2-tuples. They are declared by prepending a ~ to what looks like row syntax, like this",source:"@site/../../doc/reference/standard-library/06_lists.md",sourceDirName:"reference/standard-library",slug:"/reference/standard-library/lists",permalink:"/docs/reference/standard-library/lists",draft:!1,unlisted:!1,editUrl:"https://github.com/operating-function/pallas/edit/main/doc/../../doc/reference/standard-library/06_lists.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"referenceSidebar",previous:{title:"Rows",permalink:"/docs/reference/standard-library/rows"},next:{title:"Either",permalink:"/docs/reference/standard-library/either"}},d={},c=[{value:"NIL",id:"nil",level:3},{value:"CONS",id:"cons",level:3},{value:"listCase",id:"listcase",level:3},{value:"listSing",id:"listsing",level:3},{value:"listMap",id:"listmap",level:3},{value:"listForEach",id:"listforeach",level:3},{value:"listHead",id:"listhead",level:3},{value:"listSafeHead",id:"listsafehead",level:3},{value:"listUnsafeHead",id:"listunsafehead",level:3},{value:"listUnsafeTail",id:"listunsafetail",level:3},{value:"listIdxCps",id:"listidxcps",level:3},{value:"listIdxOr",id:"listidxor",level:3},{value:"listIdx",id:"listidx",level:3},{value:"listLastOr",id:"listlastor",level:3},{value:"listUnsafeLast",id:"listunsafelast",level:3},{value:"listLast",id:"listlast",level:3},{value:"listFoldl",id:"listfoldl",level:3},{value:"listFoldl1",id:"listfoldl1",level:3},{value:"listFoldr",id:"listfoldr",level:3},{value:"listLen",id:"listlen",level:3},{value:"listToRow",id:"listtorow",level:3},{value:"sizedListToRow",id:"sizedlisttorow",level:3},{value:"sizedListToRowRev",id:"sizedlisttorowrev",level:3},{value:"listToRowRev",id:"listtorowrev",level:3},{value:"listFromRow",id:"listfromrow",level:3},{value:"listAnd",id:"listand",level:3},{value:"listOr",id:"listor",level:3},{value:"listSum",id:"listsum",level:3},{value:"listAll",id:"listall",level:3},{value:"listAllEql",id:"listalleql",level:3},{value:"listAny",id:"listany",level:3},{value:"listHas",id:"listhas",level:3},{value:"listEnumFrom",id:"listenumfrom",level:3},{value:"listWeld",id:"listweld",level:3},{value:"listCat",id:"listcat",level:3},{value:"listCatMap",id:"listcatmap",level:3},{value:"listTake",id:"listtake",level:3},{value:"listDrop",id:"listdrop",level:3},{value:"listTakeWhile",id:"listtakewhile",level:3},{value:"listDropWhile",id:"listdropwhile",level:3},{value:"listZipWith",id:"listzipwith",level:3},{value:"listZip",id:"listzip",level:3},{value:"listFilter",id:"listfilter",level:3},{value:"listIsEmpty",id:"listisempty",level:3},{value:"listMinimumOn",id:"listminimumon",level:3},{value:"listSortOn",id:"listsorton",level:3},{value:"listNub",id:"listnub",level:3},{value:"listIterate",id:"listiterate",level:3},{value:"listGen",id:"listgen",level:3},{value:"listRep",id:"listrep",level:3},{value:"listFindIndex",id:"listfindindex",level:3},{value:"listElemIndex",id:"listelemindex",level:3},{value:"listIsPrefixOf",id:"listisprefixof",level:3},{value:"\u200b\u200b\u200b\u200b\u200blistSearch",id:"listsearch",level:3},{value:"listSubstringSearch",id:"listsubstringsearch",level:3},{value:"listIndexed",id:"listindexed",level:3},{value:"listIntersperse",id:"listintersperse",level:3},{value:"listRev",id:"listrev",level:3},{value:"listSnoc",id:"listsnoc",level:3},{value:"listProd",id:"listprod",level:3}];function h(e){const s={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"lists",children:"Lists"})}),"\n",(0,n.jsxs)(s.p,{children:["Lists are zero-terminated, nested row 2-tuples. They are declared by prepending a ",(0,n.jsx)(s.code,{children:"~"})," to what looks like row syntax, like this: ",(0,n.jsx)(s.code,{children:"~[]"})," (in the REPL we have to wrap this in parentheses):"]}),"\n",(0,n.jsx)(s.h3,{id:"nil",children:"NIL"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(NIL)\n> NIL\n"})}),"\n",(0,n.jsx)(s.p,{children:"Evaluates to 0."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"NIL    == 0    ; the empty list\n"})}),"\n",(0,n.jsx)(s.h3,{id:"cons",children:"CONS"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(CONS x xs)\n> x  : a\n> xs : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Constructs a new list by adding an element to the front of an existing list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"CONS 1 NIL                    == [1 0]            ; a list with one element\nCONS b#a (CONS b#b NIL)       == [b#a [b#a 0]]    ; a list with two elements\nCONS 1 (CONS 2 (CONS 3 NIL))  == [1 [2 [3 0]]]    ; a list with three elements\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listcase",children:"listCase"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-unset",children:"(listCase xs d k)\n> xs : List a\n> d  : a\n> k  : a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Pattern matches on a list, providing cases for empty and non-empty lists."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listCase ~[1 69 420 1337] 9001 listIdx    == 420\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listsing",children:"listSing"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listSing x)\n> x : a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Creates a singleton list containing one element."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listSing 5          == [5 0]\nlistSing b#hello    == [b#hello 0]\nlistSing []         == [[] 0]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listmap",children:"listMap"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listMap f xs)\n> f  : (a > b)\n> xs : List a\n> List b\n"})}),"\n",(0,n.jsx)(s.p,{children:"Applies a function to every element of a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listMap (mul 2) ~[1 2 3]                 == [2 [4 [6 0]]]\nlistMap isNat (CONS 3 (CONS b#a NIL))    == [1 [0 0]]\nlistMap id NIL                           == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listforeach",children:"listForEach"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listForEach xs f)\n> xs : List a\n> f  : (a > b)\n> List b\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Alias for ",(0,n.jsx)(s.code,{children:"listMap"}),". Applies a function to every element of a list."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listForEach (CONS 1 (CONS 2 (CONS 3 NIL))) (mul 2)    == [2 [4 [6 0]]]\nlistForEach (~[3 [b#a 0]]) isNat                      == [1 [0 0]]\nlistForEach NIL id                                    == NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listhead",children:"listHead"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listHead xs)\n> xs : List a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns the first element of a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listHead (CONS 2 (CONS 3 NIL))    == (0 2)\nlistHead (CONS b#a NIL)           == (0 b#a)\nlistHead NIL                      == 0\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listsafehead",children:"listSafeHead"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listSafeHead d xs)\n> d  : a\n> xs : List a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns the first element of a list, or a fallback value if the list is empty."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listSafeHead 0 (CONS 1 (CONS 2 NIL))    == 1\nlistSafeHead b#x (CONS b#a NIL)         == b#a\nlistSafeHead b#default NIL              == b#default\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listunsafehead",children:"listUnsafeHead"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listUnsafeHead xs)\n> xs : List a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns the first element of a list, otherwise 0. Unsafe if the list is empty."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listUnsafeHead (CONS 1 (CONS 2 NIL))    == 1\nlistUnsafeHead (CONS b#a NIL)           == b#a\nlistUnsafeHead NIL                      == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listunsafetail",children:"listUnsafeTail"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listUnsafeTail xs)\n> xs : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns the tail of a list (all elements except the first). Unsafe if the list is empty."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listUnsafeTail (CONS 1 (CONS 2 NIL))    == [2 0]\nlistUnsafeTail (CONS b#a NIL)           == 0\nlistUnsafeTail NIL                      == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listidxcps",children:"listIdxCps"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listIdxCps i xs d k)\n> i  : Nat\n> xs : List a\n> d  : a\n> k  : (a > b)\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Continuation-passing style function to get the element at a given index in a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listIdxCps 1 (CONS b#a (CONS b#b NIL)) b#{not found} id    == b#b\nlistIdxCps 0 (CONS 1 NIL) b#{not found} id                 == 1\nlistIdxCps 2 (CONS 1 (CONS 2 NIL)) b#{not found} id        == b#{not found}\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listidxor",children:"listIdxOr"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listIdxOr d i xs)\n> d  : a\n> i  : Nat\n> xs : List a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns the element at a given index in a list, or a fallback value if the index is out of bounds."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listIdxOr 0 1 (CONS b#a (CONS b#b NIL))       == b#b\nlistIdxOr b#z 99 (CONS b#a (CONS b#b NIL))    == b#z\nlistIdxOr b#default 0 NIL                     == b#default\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listidx",children:"listIdx"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listIdx i xs)\n> i  : Nat\n> xs : List a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns the element at a given index in a list, or 0 if the index is out of bounds."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listIdx 1 (CONS b#a (CONS b#b NIL))    == b#b\nlistIdx 0 (CONS 1 NIL)                 == 1\nlistIdx 2 (CONS 1 (CONS 2 NIL))        == 0\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listlastor",children:"listLastOr"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listLastOr d xs)\n> d  : a\n> xs : List a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns the last element of a list, or a fallback value if the list is empty."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listLastOr 0 (CONS 1 (CONS 2 NIL))    == 2\nlistLastOr b#z ~[b#a 0]               == 0\nlistLastOr b#z ~[]                    == b#z\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listunsafelast",children:"listUnsafeLast"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listUnsafeLast xs)\n> xs : List a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns the last element of a list. Unsafe if the list is empty."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listUnsafeLast (CONS 1 (CONS 2 NIL))    == 2\nlistUnsafeLast (CONS b#a NIL)           == b#a\nlistUnsafeLast NIL                      == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listlast",children:"listLast"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listLast xs)\n> xs : List a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns the last element of a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listLast (CONS 1 (CONS 2 NIL))    == (0 2)\nlistLast ~[b#a]                   == (0 b#a)\nlistLast NIL                      == 0\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listfoldl",children:"listFoldl"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listFoldl f z xs)\n> f  : (b > a > b)\n> z  : b\n> xs : List a\n> b\n"})}),"\n",(0,n.jsx)(s.p,{children:"Left-associative fold of a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listFoldl add 0 ~[1 2 3]                 == 6\nlistFoldl barWeld b#{} ~[b#a b#b b#c]    == b#abc\nlistFoldl (flip CONS) NIL ~[1 2 3]       == [3 [2 [1 0]]]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listfoldl1",children:"listFoldl1"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listFoldl1 f xs)\n> f  : (a > a > a)\n> xs : List a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Left-associative fold of a non-empty list, using the first element as the initial accumulator."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listFoldl1 add ~[2 3 4]                          == 9\nlistFoldl1 max (CONS 1 (CONS 5 (CONS 3 NIL)))    == 5\nlistFoldl1 barWeld ~[b#a b#b b#c]                == b#abc\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listfoldr",children:"listFoldr"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listFoldr f z xs)\n> f  : (a > b > b)\n> z  : b\n> xs : List a\n> b\n"})}),"\n",(0,n.jsx)(s.p,{children:"Right-associative fold of a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listFoldr sub 0 (~[1 2 3])               == 1\nlistFoldr barWeld b#{} ~[b#a b#b b#c]    == b#abc\nlistFoldr (flip CONS) NIL ~[1 2 3]       == [[[0 3] 2] 1]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listlen",children:"listLen"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listLen xs)\n> xs : List a\n> Nat\n"})}),"\n",(0,n.jsx)(s.p,{children:"Computes the length of a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listLen (CONS 1 (CONS 2 (CONS 3 NIL)))    == 3\nlistLen (CONS b#a NIL)                    == 1\nlistLen NIL                               == 0\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listtorow",children:"listToRow"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listToRow xs)\n> xs : List a\n> Row a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Converts a list to a row."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listToRow ~[1 2 3]  == [1 2 3]\nlistToRow (CONS b#a (CONS b#b NIL))       == [b#a b#b]\nlistToRow NIL                             == []\n"})}),"\n",(0,n.jsx)(s.h3,{id:"sizedlisttorow",children:"sizedListToRow"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(sizedListToRow n xs)\n> n  : Nat\n> xs : List a\n> Row a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Converts a list to a row of a specified size, padding with zeros if necessary."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"sizedListToRow 3 ~[1 2]                            == [1 2 0]\nsizedListToRow 2 (CONS 1 (CONS 2 (CONS 3 NIL)))    == [1 2]\nsizedListToRow 4 NIL                               == [0 0 0 0]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"sizedlisttorowrev",children:"sizedListToRowRev"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(sizedListToRowRev n xs)\n> n  : Nat\n> xs : List a\n> Row a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Converts a list to a row of a specified size in reverse order, padding with zeros if necessary."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"sizedListToRowRev 3 (CONS 1 (CONS 2 NIL))    == [0 2 1]\nsizedListToRowRev 2 ~[1 2 3]                 == [2 1]\nsizedListToRowRev 4 NIL                      == [0 0 0 0]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listtorowrev",children:"listToRowRev"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listToRowRev xs)\n> xs : List a\n> Row a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Converts a list to a row in reverse order."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listToRowRev (CONS 1 (CONS 2 (CONS 3 NIL)))    == [3 2 1]\nlistToRowRev (~[b#a b#b])                      == [b#b b#a]\nlistToRowRev NIL                               == []\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listfromrow",children:"listFromRow"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listFromRow xs)\n> xs : Row a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Converts a row to a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listFromRow [1 2 3]       == [1 [2 [3 0]]]\nlistFromRow [b#a b#b]     == [b#a [b#b 0]]\nlistFromRow (gen 4 id)    == [0 [1 [2 [3 0]]]]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listand",children:"listAnd"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listAnd xs)\n> xs : List Bool\n> Bool\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns TRUE if all elements in the list are TRUE, otherwise FALSE."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listAnd (CONS TRUE (CONS TRUE NIL))     == 1 ; TRUE\nlistAnd (CONS TRUE (CONS FALSE NIL))    == 0 ; FALSE\nlistAnd NIL                             == 1 ; TRUE\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listor",children:"listOr"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listOr xs)\n> xs : List Bool\n> Bool\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns TRUE if any element in the list is TRUE, otherwise FALSE."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listOr (CONS FALSE (CONS TRUE NIL))    == 1 ; TRUE\nlistOr ~[FALSE 0]                      == 0 ; FALSE\nlistOr NIL                             == 0 ; FALSE\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listsum",children:"listSum"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listSum xs)\n> xs : List Nat\n> Nat\n"})}),"\n",(0,n.jsx)(s.p,{children:"Computes the sum of all elements in a list of numbers."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listSum (CONS 1 (CONS 2 (CONS 3 NIL)))    == 6\nlistSum (~[1 2 3])                        == 6\nlistSum NIL                               == 0\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listall",children:"listAll"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listAll f xs)\n> f  : (a > Bool)\n> xs : List a\n> Bool\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns TRUE if all elements in the list satisfy the given predicate."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listAll even (CONS 2 (CONS 4 (CONS 6 NIL)))    == 1 ; TRUE\nlistAll (gte 1) (~[1 2 3])                     == 0 ; FALSE\nlistAll id NIL                                 == 1 ; TRUE\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listalleql",children:"listAllEql"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listAllEql xs)\n> xs : List a\n> Bool\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns TRUE if all elements in the list are equal."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listAllEql (CONS 1 (CONS 1 (CONS 1 NIL)))    == 1 ; TRUE\nlistAllEql (~[b#a b#a])                      == 1 ; TRUE\nlistAllEql (CONS 1 (CONS 2 NIL))             == 0 ; FALSE\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listany",children:"listAny"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listAny f xs)\n> f  : (a > Bool)\n> xs : List a\n> Bool\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns TRUE if any element in the list satisfies the given predicate."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listAny odd (CONS 2 (CONS 3 (CONS 4 NIL)))    == 1 ; TRUE\nlistAny (gte 0) (~[1 2 3])                    == 0 ; FALSE\nlistAny id NIL                                == 0 ; FALSE\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listhas",children:"listHas"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listHas e xs)\n> e  : a\n> xs : List a\n> Bool\n"})}),"\n",(0,n.jsx)(s.p,{children:"Checks if a list contains a specific element."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listHas 2 (CONS 1 (CONS 2 (CONS 3 NIL)))  == 1 ; TRUE\nlistHas b#a (CONS b#b (CONS b#c NIL))     == 0 ; FALSE\nlistHas 1 NIL                             == 0 ; FALSE\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listenumfrom",children:"listEnumFrom"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listEnumFrom x)\n> x : Nat\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Creates an infinite list of consecutive integers starting from a given number."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listTake 5 (listEnumFrom 1)    == [1 [2 [3 [4 [5 0]]]]]\nlistHead (listEnumFrom 10)     == (0 10) ; SOME\nlistIdx 1 (listEnumFrom 7)     == 8\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listweld",children:"listWeld"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listWeld xs ys)\n> xs : List a\n> ys : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Concatenates two lists."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listWeld (CONS 1 (CONS 2 NIL)) (CONS 3 (CONS 4 NIL))    == [1 [2 [3 [4 0]]]]\nlistWeld ~[b#a] ~[b#b]                                  == [b#a [b#b 0]]\nlistWeld NIL (CONS 1 NIL)                               == [1 0]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listcat",children:"listCat"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listCat xss)\n> xss : List (List a)\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Concatenates a list of lists into a single list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listCat ~[~[1 2] ~[3]]               == [1 [2 [3 0]]]\nlistCat (CONS NIL (CONS NIL NIL))    == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listcatmap",children:"listCatMap"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listCatMap f xs)\n> f  : (a > List b)\n> xs : List a\n> List b\n"})}),"\n",(0,n.jsx)(s.p,{children:"Applies a function to all elements in a list and concatenates the results."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listCatMap (x & ~[x x]) ~[1 2]      == [1 [1 [2 [2 0]]]]\nlistCatMap (x & ~[x]) ~[b#a b#b]    == [b#a [b#b 0]]\nlistCatMap (x & ~[]) ~[1 2 3]       == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listtake",children:"listTake"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listTake n xs)\n> n  : Nat\n> xs : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Takes the first n elements from a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listTake 2 (CONS 1 (CONS 2 (CONS 3 NIL)))    == [1 [2 0]]\nlistTake 3 ~[1 2]                            == [1 [2 0]]\nlistTake 0 (CONS 1 NIL)                      == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listdrop",children:"listDrop"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listDrop n xs)\n> n  : Nat\n> xs : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Drops the first n elements from a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listDrop 2 (CONS 1 (CONS 2 (CONS 3 NIL)))    == [3 0]\nlistDrop 3 ~[1 2]                            == 0 ; NIL\nlistDrop 0 (CONS 1 NIL)                      == [1 0]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listtakewhile",children:"listTakeWhile"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listTakeWhile f xs)\n> f  : (a > Bool)\n> xs : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Takes elements from the front of a list while they satisfy a predicate."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listTakeWhile (gte 2) (CONS 1 (CONS 2 (CONS 3 (CONS 4 NIL))))    == [1 [2 0]]\nlistTakeWhile even ~[2 4 5 6]                                    == [2 [4 0]]\nlistTakeWhile (const TRUE) NIL                                   == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listdropwhile",children:"listDropWhile"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listDropWhile f xs)\n> f  : (a > Bool)\n> xs : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Drops elements from the front of a list while they satisfy a predicate."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listDropWhile (gte 2) (CONS 1 (CONS 2 (CONS 3 (CONS 4 NIL))))    == [3 [4 0]]\nlistDropWhile even ~[2 4 5 6]                                    == [5 [6 0]]\nlistDropWhile (const TRUE) NIL                                   == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listzipwith",children:"listZipWith"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listZipWith f xs ys)\n> f  : (a > a > b)\n> xs : List a\n> ys : List a\n> List b\n"})}),"\n",(0,n.jsx)(s.p,{children:"Combines two lists element-wise using a given function."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listZipWith add (CONS 1 (CONS 2 NIL)) (CONS 3 (CONS 4 NIL))    == [4 [6 0]]\nlistZipWith v2 ~[1 2 3] ~[4 5]                                 == [[1 4] [[2 5] 0]]\nlistZipWith mul NIL (CONS 1 NIL)                               == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listzip",children:"listZip"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listZip xs ys)\n> xs : List a\n> ys : List a\n> List (a, a)\n"})}),"\n",(0,n.jsx)(s.p,{children:"Combines two lists into a list of pairs."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listZip (CONS 1 (CONS 2 NIL)) (CONS 3 (CONS 4 NIL))    == [[1 3] [[2 4] 0]]\nlistZip ~[1 2 3] ~[4 5]                                == [[1 4] [[2 5] 0]]\nlistZip NIL (CONS 1 NIL)                               == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listfilter",children:"listFilter"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listFilter f xs)\n> f  : (a > Bool)\n> xs : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Keeps only the elements of a list that satisfy a predicate."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listFilter even (CONS 1 (CONS 2 (CONS 3 (CONS 4 NIL))))    == [2 [4 0]]\nlistFilter (lte 3) ~[1 2 3 4 5]                            == [3 [4 [5 0]]]\nlistFilter (const TRUE) NIL                                == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listisempty",children:"listIsEmpty"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listIsEmpty xs)\n> xs : List a\n> Bool\n"})}),"\n",(0,n.jsx)(s.p,{children:"Checks if a list is empty."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listIsEmpty NIL                      == 1 ; TRUE\nlistIsEmpty (CONS 1 NIL)             == 0 ; FALSE\nlistIsEmpty (CONS 1 (CONS 2 NIL))    == 0 ; FALSE\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listminimumon",children:"listMinimumOn"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listMinimumOn f x xs)\n> f  : (a > Nat)\n> x  : a\n> xs : List a\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Finds the minimum element in a list based on a comparison function."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listMinimumOn len [456] ~[[5 2 9] [2 9] [1 9]]    == [456]\nlistMinimumOn len [456] ~[[5 2 9] [] [1 9]]       == []\nlistMinimumOn len [456] ~[[5 2 9] [2] [1 9]]      == [456]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listsorton",children:"listSortOn"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listSortOn f xs)\n> f  : (a > b)\n> xs : List a\n> List b\n"})}),"\n",(0,n.jsx)(s.p,{children:"Sorts a list based on a key function."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listSortOn id (CONS 3 (CONS 1 (CONS 2 NIL)))    == [1 [2 [3 0]]]\nlistSortOn (div 1) ~[1 2 3]                     == [3 [2 [1 0]]]\nlistSortOn len ~[[1 2] [3] [4 5 6]]             == [[3] [[1 2] [[4 5 6] 0]]]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listnub",children:"listNub"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listNub xs)\n> xs : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Removes duplicate elements from a list, keeping only the first occurrence."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listNub (CONS 1 (CONS 2 (CONS 1 (CONS 3 NIL))))    == [1 [2 [3 0]]]\nlistNub ~[3 2 1 2 1]                               == [3 [2 [1 0]]]\nlistNub NIL                                        == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listiterate",children:"listIterate"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listIterate f x)\n> f : (a > a)\n> x : a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Generates an infinite list by repeatedly applying a function to an initial value."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listTake 5 (listIterate inc 0)        == [0 [1 [2 [3 [4 0]]]]]\nlistTake 3 (listIterate (mul 2) 1)    == [1 [2 [4 0]]]\nlistTake 0 (listIterate id 1)         == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listgen",children:"listGen"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listGen n f)\n> n : Nat\n> f : (a > a)\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Generates a list of n elements using a given function."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listGen 3 id             == [0 [1 [2 0]]]\nlistGen 4 (const b#a)    == [b#a [b#a [b#a [b#a 0]]]]\nlistGen 0 (const 1)      == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listrep",children:"listRep"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listRep e n)\n> e : a\n> n : Nat\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Generates a list of n copies of a given element."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listRep 1 3      == [1 [1 [1 0]]]\nlistRep b#a 2    == [b#a [b#a 0]]\nlistRep 0 0      == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listfindindex",children:"listFindIndex"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listFindIndex f xs d m)\n> f  : (a > b)\n> xs : List a\n> d  : b\n> k  : (Nat > b)\n> a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Finds the index of the first element in a list that satisfies a predicate. If there is none, the third argument is returned. If there is one, then its index is passed as an argument to the fourth argument."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listFindIndex eql-10 ~[1 2 3] b#NONE _&(b#SOME)     == b#NONE\nlistFindIndex (eql b#a) ~[b#b b#a b#c] NONE SOME    == (0 1) ; SOME\nlistFindIndex (const FALSE) ~[1 2 3] NONE SOME      == 0 ; NONE\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listelemindex",children:"listElemIndex"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listElemIndex e xs d k)\n> e  : a\n> xs : List a\n> d  : b\n> k  : (a > b)\n> b\n"})}),"\n",(0,n.jsx)(s.p,{children:"Finds the index of the first occurrence of an element in a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listElemIndex 2 (CONS 1 (CONS 2 (CONS 3 NIL))) NONE SOME    == (0 1)\nlistElemIndex b#a ~[b#b b#c b#c b#a] NONE SOME              == (0 3)\nlistElemIndex 4 ~[1 2 3] NONE SOME                          == 0\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listisprefixof",children:"listIsPrefixOf"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listIsPrefixOf xs ys)\n> xs : List a\n> ys : List a\n> Bool\n"})}),"\n",(0,n.jsx)(s.p,{children:"Checks if one list is a prefix of another list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listIsPrefixOf (CONS 1 (CONS 2 NIL)) (CONS 1 (CONS 2 (CONS 3 NIL)))    == 1 ; TRUE\nlistIsPrefixOf ~[1 2] ~[1 2 3]                                         == 1 ; TRUE\nlistIsPrefixOf ~[1 2] ~[2 1]                                           == 0 ; FALSE\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listsearch",children:"\u200b\u200b\u200b\u200b\u200blistSearch"}),"\n",(0,n.jsx)(s.p,{children:"Searches for all occurrences of a list satisfying a predicate and returns their indices and the remaining lists."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"TODO\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listsubstringsearch",children:"listSubstringSearch"}),"\n",(0,n.jsx)(s.p,{children:"Searches for all occurrences of a substring in a list and returns their indices and the remaining lists."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"TODO\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listindexed",children:"listIndexed"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listIndexed xs)\n> xs : List a\n> List (Row a)\n"})}),"\n",(0,n.jsx)(s.p,{children:"Pairs each element in a list with its index."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listIndexed (CONS 1 (CONS 2 (CONS 3 NIL)))    == [[0 1] [[1 2] [[2 3] 0]]]\nlistIndexed ~[b#a b#b]                        == [[0 b#a] [[1 b#b] 0]]\nlistIndexed NIL                               == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listintersperse",children:"listIntersperse"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listIntersperse e xs)\n> e  : a\n> xs : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Intersperses an element between every element of a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listIntersperse 0 (CONS 1 (CONS 2 (CONS 3 NIL)))    == [1 [0 [2 [0 [3 0]]]]]\nlistIntersperse b#a ~[b#b]                          == [b#b 0]\nlistIntersperse 0 NIL                               == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listrev",children:"listRev"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listRev xs)\n> xs : List a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Reverses a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listRev (CONS 1 (CONS 2 (CONS 3 NIL)))    == [3 [2 [1 0]]]\nlistRev ~[b#a b#b]                        == [b#b [b#a 0]]\nlistRev NIL                               == 0 ; NIL\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listsnoc",children:"listSnoc"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listSnoc xs e)\n> xs : List a\n> e  : a\n> List a\n"})}),"\n",(0,n.jsx)(s.p,{children:"Adds an element to the end of a list."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listSnoc (CONS 1 (CONS 2 NIL)) 3    == [1 [2 [3 0]]]\nlistSnoc ~[b#a] b#b                 == [b#a [b#b 0]]\nlistSnoc NIL 1                      == [1 0]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listprod",children:"listProd"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"(listProd xs ys)\n> xs : List a\n> ys : List b\n> List (Row a b)\n"})}),"\n",(0,n.jsx)(s.p,{children:"Computes the Cartesian product of two lists."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sire",children:"listProd (CONS 1 (CONS 2 NIL)) (CONS 3 (CONS 4 NIL))    == [[1 3] [[1 4] [[2 3] [[2 4] 0]]]]\nlistProd ~[1 2] ~[b#a b#b]                              == [[1 b#a] [[1 b#b] [[2 b#a] [[2 b#b] 0]]]]\nlistProd NIL (CONS 1 NIL)                               == 0 ; NIL\n"})})]})}function o(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>a,x:()=>r});var n=i(6540);const l={},t=n.createContext(l);function a(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);