"use strict";(self.webpackChunkpallas=self.webpackChunkpallas||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"explanationSidebar":[{"type":"link","label":"System Overview","href":"/docs/explanation/system-overview","docId":"explanation/system-overview","unlisted":false},{"type":"category","label":"PLAN","collapsed":false,"items":[{"type":"link","label":"Data Model","href":"/docs/explanation/plan-data-model","docId":"explanation/plan-data-model","unlisted":false},{"type":"link","label":"Evaluation Model","href":"/docs/explanation/plan-evaluation-model","docId":"explanation/plan-evaluation-model","unlisted":false}],"collapsible":true},{"type":"link","label":"VM and Interpreter","href":"/docs/explanation/vm-and-interpreter","docId":"explanation/vm-and-interpreter","unlisted":false},{"type":"link","label":"Sire and Rex","href":"/docs/explanation/sire-and-rex","docId":"explanation/sire-and-rex","unlisted":false}],"referenceSidebar":[{"type":"category","label":"Sire reference","collapsed":false,"items":[{"type":"link","label":"Test","href":"/docs/reference/ref-test","docId":"reference/ref-test","unlisted":false}],"collapsible":true}]},"docs":{"explanation/plan-data-model":{"id":"explanation/plan-data-model","title":"Data Model","description":"The previous section provided an overview of the system and how the different components contribute to its overall functioning. Let\u2019s now take a closer look at each component, starting with PLAN.","sidebar":"explanationSidebar"},"explanation/plan-evaluation-model":{"id":"explanation/plan-evaluation-model","title":"Evaluation Model","description":"So far we\u2019ve only looked at PLAN as inert data. We\u2019ve hinted at dynamics, but we haven\u2019t given any details. Let\u2019s go through the rest of the specification chunk by chunk.","sidebar":"explanationSidebar"},"explanation/sire-and-rex":{"id":"explanation/sire-and-rex","title":"Sire and Rex","description":"Sire is a minimalist functional language that bootstraps itself from PLAN. Unlike PLAN, Sire aims to be realistic for humans to write. In service of this goal, it allows programmers to reference previously defined names in an environment, which it uses lambda lifting to eliminate when compiling itself to PLAN.","sidebar":"explanationSidebar"},"explanation/system-overview":{"id":"explanation/system-overview","title":"System Overview","description":"Pallas is a stack of technologies. At the bottom lies PLAN, an evaluation model. On top of PLAN we have two separate stacks: on one hand Rex and Sire allow programmers to implement programming languages which compile to PLAN, while a manifest format consisting of cogs and drivers is used to completely specify the behavior of a virtual machine that runs PLAN. We\u2019ll start by explaining how these fit together on a high level, and then go into each one in detail.","sidebar":"explanationSidebar"},"explanation/vm-and-interpreter":{"id":"explanation/vm-and-interpreter","title":"VM and Interpreter","description":"PLAN is a standard for representing compute and data in the abstract; a PLAN expression is a specification of a program. We need to be able to turn such specifications into actual hardware operations. This is the job of a PLAN interpreter. A PLAN interpreter implements PLAN.","sidebar":"explanationSidebar"},"reference/ref-test":{"id":"reference/ref-test","title":"Test","description":"","sidebar":"referenceSidebar"}}}}')}}]);