"use strict";(self.webpackChunkpallas=self.webpackChunkpallas||[]).push([[462],{2036:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=n(4848),i=n(8453);const r={},l="Sets",a={id:"reference/standard-library/sets",title:"Sets",description:"Type signatures are provisional and may contain errors.",source:"@site/../../doc/reference/standard-library/09_sets.md",sourceDirName:"reference/standard-library",slug:"/reference/standard-library/sets",permalink:"/docs/reference/standard-library/sets",draft:!1,unlisted:!1,editUrl:"https://github.com/operating-function/pallas/edit/main/doc/../../doc/reference/standard-library/09_sets.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"referenceSidebar",previous:{title:"Maybe",permalink:"/docs/reference/standard-library/maybe"},next:{title:"KV Tables",permalink:"/docs/reference/standard-library/kv-tables"}},d={},c=[{value:"Set Functions",id:"set-functions",level:2},{value:"isSet",id:"isset",level:3},{value:"emptySet",id:"emptyset",level:3},{value:"setIsEmpty",id:"setisempty",level:3},{value:"setSing",id:"setsing",level:3},{value:"setFromRow",id:"setfromrow",level:3},{value:"setFromRowAsc",id:"setfromrowasc",level:3},{value:"setToRow",id:"settorow",level:3},{value:"setLen",id:"setlen",level:3},{value:"setToList",id:"settolist",level:3},{value:"setFoldl",id:"setfoldl",level:3},{value:"setFoldr",id:"setfoldr",level:3},{value:"setIns",id:"setins",level:3},{value:"setDel",id:"setdel",level:3},{value:"setHas",id:"sethas",level:3},{value:"setWeld",id:"setweld",level:3},{value:"setUnion",id:"setunion",level:3},{value:"setCatRow",id:"setcatrow",level:3},{value:"setCatList",id:"setcatlist",level:3},{value:"setCatRowAsc",id:"setcatrowasc",level:3},{value:"setMin",id:"setmin",level:3},{value:"setMax",id:"setmax",level:3},{value:"setPop",id:"setpop",level:3},{value:"setDrop",id:"setdrop",level:3},{value:"setTake",id:"settake",level:3},{value:"setSplitAt",id:"setsplitat",level:3},{value:"setSplitLT",id:"setsplitlt",level:3},{value:"setIntersect",id:"setintersect",level:3},{value:"setSub",id:"setsub",level:3},{value:"setElem",id:"setelem",level:3},{value:"setDifference",id:"setdifference",level:3},{value:"setInsert",id:"setinsert",level:3},{value:"setSubtract",id:"setsubtract",level:3},{value:"setIntersection",id:"setintersection",level:3}];function o(e){const s={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"sets",children:"Sets"})}),"\n",(0,t.jsx)(s.admonition,{title:"TODO",type:"warning",children:(0,t.jsx)(s.p,{children:"Type signatures are provisional and may contain errors."})}),"\n",(0,t.jsxs)(s.p,{children:["Data jetted sets of nouns. Sets are represented as a ",(0,t.jsx)(s.code,{children:"law"})," where the row has no duplicate elements and all elements are stored in ascending order, with the form:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(0 1 2 row)\n"})}),"\n",(0,t.jsx)(s.h2,{id:"set-functions",children:"Set Functions"}),"\n",(0,t.jsx)(s.h3,{id:"isset",children:"isSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(isSet x)\n> x : a\n> Bool\n"})}),"\n",(0,t.jsx)(s.p,{children:"Checks if a value is a valid set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"isSet %[]           == 1\nisSet %[1 2 3]      == 1\nisSet (0 1 2 [])    == 1\nisSet (0 2 2 [])    == 0  ; Invalid set representation\nisSet [1 2 3]       == 0  ; Not a set, just a row\n"})}),"\n",(0,t.jsx)(s.h3,{id:"emptyset",children:"emptySet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(emptySet)\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns an empty set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"emptySet    == %[]\nemptySet    == setFromRow []\nemptySet    == setDel 1 %[1]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setisempty",children:"setIsEmpty"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setIsEmpty xs)\n> xs : Set a\n> Bool\n"})}),"\n",(0,t.jsx)(s.p,{children:"Checks if a set is empty."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setIsEmpty emptySet    == 1\nsetIsEmpty %[1]        == 0\nsetIsEmpty %[1 2 3]    == 0\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setsing",children:"setSing"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setSing e)\n> e : a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Creates a singleton set containing one element."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setSing 3      == %[3]\nsetSing {a}    == %[a]\nsetSing 0      == %[0]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setfromrow",children:"setFromRow"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setFromRow xs)\n> xs : Row a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Creates a set from a row, removing duplicates and sorting."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setFromRow [3 1 2 1]        == %[1 2 3]\nsetFromRow [{a} {b} {a}]    == %[a b]\nsetFromRow [5 4 3 2 1]      == %[1 2 3 4 5]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setfromrowasc",children:"setFromRowAsc"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setFromRowAsc xs)\n> xs : Row a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Creates a set from a row that is already in ascending order with no duplicates."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setFromRowAsc [1 2 3]          == %[1 2 3]\nsetFromRowAsc [{a} {b} {c}]    == %[a b c]\nsetFromRowAsc [0]              == %[0]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"settorow",children:"setToRow"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setToRow xs)\n> xs : Set a\n> Row a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Converts a set to a row."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setToRow %[1 2 3]    == [1 2 3]\nsetToRow %[a b c]    == [a b c]\nsetToRow %[]         == []\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setlen",children:"setLen"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setLen xs)\n> xs : Set a\n> Nat\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the number of elements in a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setLen %[]         == 0\nsetLen %[1 2 3]    == 3\nsetLen %[a]        == 1\n"})}),"\n",(0,t.jsx)(s.h3,{id:"settolist",children:"setToList"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setToList xs)\n> xs : Set a\n> List a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Converts a set to a list."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setToList %[1 2 3]    == [1 [2 [3 0]]]\nsetToList %[a b]      == [%a [%b 0]]\nsetToList %[]         == 0  ; NIL\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setfoldl",children:"setFoldl"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setFoldl f z xs)\n> f  : (b > a > b)\n> z  : b\n> xs : Set a\n> b\n"})}),"\n",(0,t.jsx)(s.p,{children:"Left-associative fold over a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setFoldl add 0 %[1 2 3]              == 6\nsetFoldl mul 1 %[1 2 3 4]            == 24\nsetFoldl (flip CONS) NIL %[1 2 3]    == [3 [2 [1 0]]]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setfoldr",children:"setFoldr"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setFoldr f z xs)\n> f  : (a > b > b)\n> z  : b\n> xs : Set a\n> b\n"})}),"\n",(0,t.jsx)(s.p,{children:"Right-associative fold over a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setFoldr (flip CONS) NIL %[1 2 3]     == [[[0 3] 2] 1]\nsetFoldr sub 0 %[1 2 3]               == 1\nsetFoldr strWeld {} %[{a} {b} {c}]    == %abc\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setins",children:"setIns"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setIns e xs)\n> e  : a\n> xs : Set a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Inserts an element into a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setIns 3 %[1 2]      == %[1 2 3]\nsetIns 2 %[1 2]      == %[1 2]  ; No change if element already exists\nsetIns {a} %[b c]    == %[a b c]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setdel",children:"setDel"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setDel e xs)\n> e  : a\n> xs : Set a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Removes an element from a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setDel 2 %[1 2 3]      == %[1 3]\nsetDel 4 %[1 2 3]      == %[1 2 3]  ; No change if element doesn't exist\nsetDel {b} %[a b c]    == %[a c]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"sethas",children:"setHas"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setHas e xs)\n> e  : a\n> xs : Set a\n> Bool\n"})}),"\n",(0,t.jsx)(s.p,{children:"Checks if an element is in a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setHas 2 %[1 2 3]      == 1\nsetHas 4 %[1 2 3]      == 0\nsetHas {b} %[a b c]    == 1\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setweld",children:"setWeld"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setWeld xs ys)\n> xs : Set a\n> ys : Set a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Combines two sets."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setWeld %[1 2] %[2 3]    == %[1 2 3]\nsetWeld %[a b] %[c d]    == %[a b c d]\nsetWeld %[] %[1 2 3]     == %[1 2 3]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setunion",children:"setUnion"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setUnion xs ys)\n> xs : Set a\n> ys : Set a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Alias for setWeld. Combines two sets."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setUnion %[1 2] %[2 3]    == %[1 2 3]\nsetUnion %[a b] %[c d]    == %[a b c d]\nsetUnion %[] %[1 2 3]     == %[1 2 3]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setcatrow",children:"setCatRow"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setCatRow xs)\n> xs : Row (Set a)\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Combines a row of sets into a single set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setCatRow [%[1 2] %[2 3] %[3 4]]    == %[1 2 3 4]\nsetCatRow [%[a b] %[c] %[d e]]      == %[a b c d e]\nsetCatRow [%[] %[1] %[]]            == %[1]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setcatlist",children:"setCatList"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setCatList xs)\n> xs : List (Set a)\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Combines a list of sets into a single set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setCatList [%[1 2] [%[3 4] [%[2 3] 0]]]    == %[1 2 3 4]\nsetCatList [%[a b] [%[c] [%[d e] 0]]]      == %[a b c d e]\nsetCatList [%[] [%[1] [%[] 0]]]            == %[1]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setcatrowasc",children:"setCatRowAsc"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setCatRowAsc x)\n> xs : Row (Set a)\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Combines a row of sets that are already in ascending order."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setCatRowAsc [%[1 2] %[3 4] %[5 6]]    == %[1 2 3 4 5 6]\nsetCatRowAsc [%[a b] %[c d] %[e f]]    == %[a b c d e f]\nsetCatRowAsc [%[] %[1] %[2 3]]         == %[1 2 3]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setmin",children:"setMin"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setMin xs)\n> xs : Set a\n> a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the minimum element in a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setMin %[1 2 3]    == 1\nsetMin %[c b a]    == a\nsetMin %[5]        == 5\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setmax",children:"setMax"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setMax xs)\n> xs : Set a\n> a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the maximum element in a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setMax %[1 2 3]    == 3\nsetMax %[c b a]    == c\nsetMax %[5]        == 5\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setpop",children:"setPop"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setPop xs)\n> xs : Set a\n> (a, Set a)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Removes and returns the minimum element from a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setPop %[1 2 3 4]    == [1 %[2 3 4]]\nsetPop %[a b c]    == [%a %[b c]]\nsetPop %[5]        == [5 %[]]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setdrop",children:"setDrop"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setDrop n xs)\n> n  : Nat\n> xs : Set a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Removes the first n elements from a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setDrop 2 %[1 2 3 4]    == %[3 4]\nsetDrop 1 %[a b c]      == %[b c]\nsetDrop 0 %[1 2 3]      == %[1 2 3]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"settake",children:"setTake"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setTake n xs)\n> n  : Nat\n> xs : Set a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Keeps the first n elements of a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setTake 2 %[1 2 3 4]    == %[1 2]\nsetTake 3 %[a b c d]    == %[a b c]\nsetTake 0 %[1 2 3]      == %[]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setsplitat",children:"setSplitAt"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setSplitAt i xs)\n> i  : Nat\n> xs : Set a\n> (Set a, Set a)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Splits a set at a given index."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setSplitAt 2 %[1 2 3 4]    == [%[1 2] %[3 4]]\nsetSplitAt 1 %[a b c]      == [%[a] %[b c]]\nsetSplitAt 0 %[1 2 3]      == [%[] %[1 2 3]]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setsplitlt",children:"setSplitLT"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setSplitLT n xs)\n> n  : a\n> xs : Set a\n> (Set a, Set a)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Splits a set into elements less than a given value and the rest."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setSplitLT 3 %[1 2 3 4 5]      == [%[1 2] %[3 4 5]]\nsetSplitLT {c} %[a b c d e]    == [%[a b] %[c d e]]\nsetSplitLT 0 %[1 2 3]          == [%[] %[1 2 3]]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setintersect",children:"setIntersect"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setIntersect xs ys)\n> xs : Set a\n> ys : Set a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the intersection of two sets."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setIntersect %[1 2 3] %[2 3 4]    == %[2 3]\nsetIntersect %[a b c] %[b c d]    == %[b c]\nsetIntersect %[1 2 3] %[4 5 6]    == %[]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setsub",children:"setSub"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setSub xs ys)\n> xs : Set a\n> ys : Set a\n> Set a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Subtracts one set from another."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setSub %[1 2 3] %[2 3]      == %[1]\nsetSub %[a b c d] %[b d]    == %[a c]\nsetSub %[1 2 3] %[4 5 6]    == %[1 2 3]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setelem",children:"setElem"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"(setElem n xs)\n> n  : Nat\n> xs : Set a\n> a\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the nth element of a set."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sire",children:"setElem 1 %[1 2 3]    == 2\nsetElem 0 %[a b c]    == %a\nsetElem 2 %[x y z]    == %z\n"})}),"\n",(0,t.jsx)(s.h3,{id:"setdifference",children:"setDifference"}),"\n",(0,t.jsx)(s.p,{children:"Alias for setSub."}),"\n",(0,t.jsx)(s.h3,{id:"setinsert",children:"setInsert"}),"\n",(0,t.jsx)(s.p,{children:"Alias for setIns."}),"\n",(0,t.jsx)(s.h3,{id:"setsubtract",children:"setSubtract"}),"\n",(0,t.jsx)(s.p,{children:"Alias for setSub."}),"\n",(0,t.jsx)(s.h3,{id:"setintersection",children:"setIntersection"}),"\n",(0,t.jsx)(s.p,{children:"Alias for setIntersect."})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var t=n(6540);const i={},r=t.createContext(i);function l(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);