{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"System Overview","href":"/docs/system-overview","docId":"system-overview","unlisted":false},{"type":"link","label":"PLAN; the data model","href":"/docs/plan-data-model","docId":"plan-data-model","unlisted":false},{"type":"link","label":"PLAN; the evaluation model","href":"/docs/plan-evaluation-model","docId":"plan-evaluation-model","unlisted":false},{"type":"link","label":"VM and Interpreter","href":"/docs/vm-and-interpreter","docId":"vm-and-interpreter","unlisted":false},{"type":"link","label":"Sire and Rex","href":"/docs/sire-and-rex","docId":"sire-and-rex","unlisted":false}]},"docs":{"plan-data-model":{"id":"plan-data-model","title":"PLAN; the data model","description":"The previous section provided an overview of the system and how the different components contribute to its overall functioning. Let’s now take a closer look at each component, starting with PLAN.","sidebar":"tutorialSidebar"},"plan-evaluation-model":{"id":"plan-evaluation-model","title":"PLAN; the evaluation model","description":"So far we’ve only looked at PLAN as inert data. We’ve hinted at dynamics, but we haven’t given any details. Let’s go through the rest of the specification chunk by chunk.","sidebar":"tutorialSidebar"},"sire-and-rex":{"id":"sire-and-rex","title":"Sire and Rex","description":"Sire is a minimalist functional language that bootstraps itself from PLAN. Unlike PLAN, Sire aims to be realistic for humans to write. In service of this goal, it allows programmers to reference previously defined names in an environment, which it uses lambda lifting to eliminate when compiling itself to PLAN.","sidebar":"tutorialSidebar"},"system-overview":{"id":"system-overview","title":"System Overview","description":"Pallas is a stack of technologies. At the bottom lies PLAN, an evaluation model. On top of PLAN we have two separate stacks: on one hand Rex and Sire allow programmers to implement programming languages which compile to PLAN, while a manifest format consisting of cogs and drivers is used to completely specify the behavior of a virtual machine that runs PLAN. We’ll start by explaining how these fit together on a high level, and then go into each one in detail.","sidebar":"tutorialSidebar"},"vm-and-interpreter":{"id":"vm-and-interpreter","title":"VM and Interpreter","description":"PLAN is a standard for representing compute and data in the abstract; a PLAN expression is a specification of a program. We need to be able to turn such specifications into actual hardware operations. This is the job of a PLAN interpreter. A PLAN interpreter implements PLAN.","sidebar":"tutorialSidebar"}}}}