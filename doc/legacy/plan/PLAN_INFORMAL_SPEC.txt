Each value is a pin x:<i>, a law x:{n a b}, an app x:(f g), or a nat x:@.

Treat this as a combinator system, and use normal-order evaluation to normalize.
Unmatched patterns diverge.

    (0 n a b) | NAT(a)>0 = {NAT(n) NAT(a) force(body)}
    (1 p _ _ _ <x>)      = (p x)
    (1 _ l _ _ {n a b})  = (l n a b)
    (1 _ _ a _ (f x))    = (a f x)
    (1 _ _ _ n x:@)      = (n x)
    (2 z p x)            = n=NAT(x); if n=0 then z else p (n-1)
    (3 x)                = NAT(x)+1
    (4 x)                = <force(x)>
    (f:{n a b} x0..xn)   = EXEC([f x0..xn], b)
    (f:<{n a b}> x0..xn) = EXEC([f x0..xn], b)
    (<i> ..)             = (i ..)

    NAT(x:@) = x
    NAT(_)   = 0

    EXEC(e, n:@) | n<len(e) = e[n]
    EXEC(e, (0 x y))        = (EXEC(x) EXEC(y))
    EXEC(e, (1 v b))        = EXEC(f,b) where f = e ++ [EXEC(f,v)]
    EXEC(e, (2 x))          = x
    EXEC(e, x)              = x

This informal specification glosses over details, but is otherwise correct.
