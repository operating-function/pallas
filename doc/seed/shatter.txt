# `shatter()`

This document attempts to explain the "shatter()" algorithm.


## What does `shatter()` do?

shatter() produces a minimal sequence of DAG fragments, each fragment
can reference any previous fragment.

We take as input an input DAG that has already been fully de-duplicated.

For example, for the example, if the tree ((0 0) (0 0)) has already been
deduplicated into this DAG:

    a = 0
    b = (0 0)
    c = (b b)

We transform that into a series of fragments such as:

    frag[0] = (0 0)
    frag[1] = (frag[0] frag[0])

shatter() also needs a reference-count for each node of the DAG.

So, the example input `((0 0) (0 0)) actually contains the following
information:

    Tree: ((0 0) (0 0))

    p = 0     [refs=4]
    a = (p p) [refs=2]
    b = (a a) [refs=1]


## How does `shatter()` work?

The solution is to create a new fragment at each point where a cell
references another cell, but the child cell has a higher reference count.

So, `a` should be a fragment because `b` references `a`, but `a` has a
higher ref-count than `b`.

shatter() contains an optimized implementation of this algorithm, using
an explicit stack(), which we pre-allocate (and never need to resize).

For now, see the code for the actual algorithm, but here are some
(manually constructed) execution traces to help you understand:

    TODO: Document the actual algorithm.

    TODO: This is slightly stale, we now FRAG after a merge by looking
    up two slots (in the stack) to find the parent (or exiting if there
    is no parent).

    TODO: Update the examples to reflect the above ^


## Execution Traces

```
======================
shatter: ((0 1) (2 3))
======================

p=0        [refs=1]
q=1        [refs=1]
r=2        [refs=1]
s=3        [refs=1]
a=(p q)    [refs=1]
b=(r s)    [refs=1]
c=(a b)    [refs=1]

START                 [c1]
c is the cell (a b)   [b1 a1 c1]
b is the cell (r s)   [s1 r1 b1 a1 c1]
s is a leaf           [s1(1) r1 b1 a1 c1]
stk[1] not done, swap [r1 s1(1) b1 a1 c1]
r is a leaf           [r1(1) s1(1) b1 a1 c1]
stk[1] is done
  head okay (sz=1)
  tail okay (sz=1)
  merge               [b1(2) a1 c1]
stk[1] not done, swap [a1 b1(2) c1]
a is cell (p q)       [q1 p1 a1 b1(2) c1]
q is a leaf           [q1(1) p1 a1 b1(2) c1]
stk[1] not done, swap [p1 q1(1) a1 b1(2) c1]
p is a leaf           [p1(1) q1(1) a1 b1(2) c1]
stk[1] is done,
  head okay (sz=1)
  tail okay (sz=1)
  merge               [a1(2) b1(2) c1]
stk[1] is done        [a1(2) b1(2) c1]
  head okay (refs =)
  tail okay (refs =)
  merge               [c1(4)]
stk[1] dne
  END                 FRAG(c,4)

RESULT:

  frags[0] = c{leaves=4} = ((p q) (r s))

======================
shatter: ((0 0) (0 0))
======================

p=0        [refs=4]
a=(p p)    [refs=2]
b=(a a)    [refs=1]

START                 [b1]
b is the cell (a a)   [a2 a2 b1]
a is the cell (p p)   [p4 p4 a2 a2 b1]
p is a leaf           [p4(1) p4 a2 a2 b1]
stk[1] not done, swap [p4 p4(1) a2 a2 b1]
p is a leaf           [p4(1) p4(1) a2 a2 b1]
stk[1] is done
  head okay (sz=1)
  tail okay (sz=1)
  merge               [a2(2) a2 b1]
stk[1] not done, swap [a2 a2(2) b1]
a is the cell (p p)   [p4 p4 a2 a2(2) b1]
p is a leaf           [p4(1) p4 a2 a2(2) b1]
stk[1] not done, swap [p4 p4(1) a2 a2(2) b1]
p is a leaf           [p4(1) p4(1) a2 a2(2) b1]
stk[1] is done
  head okay (sz=1)
  tail okay (sz=1)
  merge               [a2(2) a2(2) b1]
stk[1] is done        [a2(2) a2(2) b1]
  head frag (2>1)     FRAG(a)
                      [a2(1) a2(2) b1]
  tail frag (2>1)     FRAG(a) {already fragged}
                      [a2(1) a2(1) b1]
  merge               [b1(2)]
stk[1] dne
  END                 FRAG(b,2)

RESULT:

  frags[0] = a{leaves=2} = (p p)
  frags[1] = b{leaves=2} = (a a)

==========================
shatter: ((0 1 2) (0 1 2))
==========================

p=0        [refs=2]
q=1        [refs=2]
r=2        [refs=2]
a=(p q)    [refs=2]
b=(a r)    [refs=2]
c=(b b)    [refs=1]

START                 [c1]
c is the cell (b b)   [b2 b2 c1]
b is the cell (a r)   [r2 a2 b2 b2 c1]
r is a leaf           [r2(1) a2 b2 b2 c1]
stk[1] not done, swap [a2 r2(1) b2 b2 c1]
a is the cell (p q)   [p q a2 r2(1) b2 b2 c1]
p is a leaf           [p(1) q a2 r2(1) b2 b2 c1]
stk[1] not done, swap [q p(1) a2 r2(1) b2 b2 c1]
q is a leaf           [q(1) p(1) a2 r2(1) b2 b2 c1]
stk[1] is done        [q(1) p(1) a2 r2(1) b2 b2 c1]
  head okay (sz=1)
  tail okay (sz=1)
  merge               [a2(2) r2(1) b2 b2 c1]
stk[1] is done
  head okay (2==2)
  tail okay (2==2)
  merge               [b2(3) b2 c1]
stk[1] not done, swap [b2 b2(3) c1]
b is the cell (a r)   [r2 a2 b2 b2(3) c1]
r is a leaf           [r2(1) a2 b2 b2(3) c1]
stk[1] not done, swap [a2 r2(1) b2 b2(3) c1]
a is the cell (p q)   [q2 p2 a2 r2(1) b2 b2(3) c1]
q is a leaf           [q2(1) p2 a2 r2(1) b2 b2(3) c1]
stk[1] not done, swap [p2 q2(1) a2 r2(1) b2 b2(3) c1]
p is a leaf           [p2(1) q2(1) a2 r2(1) b2 b2(3) c1]
stk[1] done
  head okay (2==2)
  tail okay (2==2)
  merge               [a2(2) r2(1) b2 b2(3) c1]
stk[1] done
  head okay (2==2)
  tail okay (2==2)
  merge               [b2(3) b2(3) c1]
stk[1] done           [b2(3) b2(3) c1]
  FRAG(b,3)           [b2(1) b2(3) c1]
  FRAG(b,3)           [b2(1) b2(1) c1] {no effect}
  merge               [c1(2)]
stk[1] dne
  END                 FRAG(c,2)


RESULT:

  frags[0] = b{leaves=3} = ((p q) r)
  frags[1] = c{leaves=2} = (b b)
```
