; Copyright 2024 The OPfN Authors
; Use of this source code is governed by a BSD-style license that can be
; found in the LICENSE file.

#### driver_http <- lib_http

; Things that need to happen:
; - Test passing JSON body in a POST request - probably need to do a bunch after that
; - Properly test the server loop / processMessage flow with multiple
;   connections. re-open / new connections, etc.

:| lib_http


; TODO:
> HTTPBuffer > Bit
= (validRequest request)
; early response for malformed requests - potentially depends on better strategy
; for _short-circuiting_ message chunk ingesting. See processHTTPChunk.
; Goes nicely with error400
TRUE


; TODO:
> HTTPResponse > Bit
= (validResponse response)
; did we get a garbage response from the app?
; if so, we shouldn't send it out.
; return either a bar to be sent out, or nothing (maybe)
; Goes nicely with error500
;
; Do the validation work here. call this in appResponseToHTTP
TRUE

;; An app returns a tuple [headers body cody reason]
;; which the HTTP server turns into a response.
# typedef AppResponse (Tab Bar Bar, Nat, Bar, Bar)

> AppResponse > HTTPResponse
= (appResponseToHTTP [headers body code reason])
; TODO: check validity of headers/body/code we got from app here
; Formulate an HTTPResponse anyway (probably a 500 or whatever)
| ifNot (validResponse b#{TODO})
  | error500 b#{cog did a dumb}
; TODO:
; - reason phrase should come from app but be overridable by server in case error
@ version      | b#{HTTP/1.0}
@ statusCode   | code
@ reasonPhrase | reason
@ body         | body
@ contentLength | natBar | showNat | barLen body ; should be zero if not present
@ headers | tabIns b#{Content-Length} contentLength headers
@ headers | tabIns b#{Server} b#{Pallas/0.1} headers
; TODO: need
; @ headers | tabIns b#{Date}
; TODO: others, maybe:
; @ headers | tabIns b#{Content-Encoding}
; @ headers | tabIns b#{Content-Type}
; This concatenation with colons _could_ be done in a subsequent function that
; is responsible for HTTP_RES -> Hex Bar
@ headersList
  | tabValsList
  | tabMapWithKey
  (k v & (barCat [k b#{: } v]))
  headers
| HTTP_RES
* version
* statusCode
* reasonPhrase
* headersList
* body


= (processConnection io getResponse buffer return)
: data < launch | TCP_TAKE io
| if (barIsEmpty data)
  ; TCP has been SHUT
  | trk [%connectionClosed %dataBarEmpty]
  | return ()
@ updatedBuffer | processHttpChunk buffer data
| ifNot (validRequest updatedBuffer)
  | processConnection io updatedBuffer return
: request < maybeCase (makeRequest updatedBuffer)
          ; valid but incomplete
          | processConnection io updatedBuffer return
; complete and valid
: cogResponse < getResponse request
;;;; Just for printing
@ [headers body code reas] | cogResponse
@ truncatedBody | idx 0 | barSplitAt 20 body
| trk [%cogResponse [=headers =code =reas =truncatedBody]]
;;;;
^ _ (httpResToBar | appResponseToHTTP cogResponse)
? (sendAndClose responseBar)
: mBytes < launch | TCP_GIVE io responseBar
| trk [%sent mBytes %bytes]
: bytes  < maybeCase mBytes | launch (TCP_SHUT io) return
| if (barLen responseBar == bytes) | launch (TCP_SHUT io) return
| sendAndClose | barDrop bytes responseBar

= (httpServer responseHandler return)
: port < launch | TCP_MINE
| trk [%httpRunning (barCat [b#{visit } b#{http://localhost:} (natBar | showNat port)])]
^ _ return
? (go return)
: [io ip port] < launch | TCP_HEAR
| trk [%theirConnection [=io =ip =port]]
: _ < processConnection io responseHandler (emptyBuffer ip port)
| go return
